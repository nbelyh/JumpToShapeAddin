// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (37e1ad16).
//
// d:\projects\p4b\mod-6.0.0\check\src\modeler\obj\debug\VISLIB.tli
//
// Wrapper implementations for Win32 type library {00021A98-0000-0000-C000-000000000046}
// compiler-generated file created 04/17/13 at 02:13:08 - DO NOT EDIT!

#pragma once

namespace Visio {

//
// dispinterface EDocument wrapper method implementations
//

HRESULT EDocument::DocumentOpened ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::DocumentCreated ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::DocumentSaved ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::DocumentSavedAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::DocumentChanged ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::BeforeDocumentClose ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocument::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocument::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocument::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocument::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocument::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocument::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocument::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocument::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocument::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocument::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocument::RunModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::DesignModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::BeforeDocumentSave ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::BeforeDocumentSaveAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::QueryCancelDocumentClose ( struct IVDocument * doc, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", doc);
}

HRESULT EDocument::DocumentCloseCanceled ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

HRESULT EDocument::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocument::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

HRESULT EDocument::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocument::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

HRESULT EDocument::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocument::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocument::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocument::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocument::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocument::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocument::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocument::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocument::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocument::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocument::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocument::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocument::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocument::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EDocument::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EDocument::AfterRemoveHiddenInformation ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocument::RuleSetValidated ( struct IVValidationRuleSet * RuleSet ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", RuleSet);
}

HRESULT EDocument::AfterDocumentMerge ( struct IVCoauthMergeEvent * coauthMergeObjects ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", coauthMergeObjects);
}

//
// dispinterface EApplication wrapper method implementations
//

HRESULT EApplication::AppActivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::AppDeactivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::AppObjActivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::AppObjDeactivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::BeforeQuit ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::BeforeModal ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::AfterModal ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::WindowOpened ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x8001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::SelectionChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::BeforeWindowClosed ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x4001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::WindowActivated ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x1080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::BeforeWindowSelDelete ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::BeforeWindowPageTurn ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::WindowTurnedToPage ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::DocumentOpened ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::DocumentCreated ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::DocumentSaved ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::DocumentSavedAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::DocumentChanged ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::BeforeDocumentClose ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EApplication::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EApplication::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EApplication::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EApplication::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EApplication::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EApplication::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EApplication::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EApplication::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EApplication::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EApplication::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EApplication::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EApplication::MarkerEvent ( struct IVApplication * app, long SequenceNum, _bstr_t ContextString ) {
    return _com_dispatch_method(this, 0x1100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0008", app, SequenceNum, (BSTR)ContextString);
}

HRESULT EApplication::NoEventsPending ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1200, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::VisioIsIdle ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1400, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::MustFlushScopeBeginning ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xc8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::MustFlushScopeEnded ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xc9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::RunModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::DesignModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::BeforeDocumentSave ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::BeforeDocumentSaveAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EApplication::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EApplication::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EApplication::EnterScope ( struct IVApplication * app, long nScopeID, _bstr_t bstrDescription ) {
    return _com_dispatch_method(this, 0xca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0008", app, nScopeID, (BSTR)bstrDescription);
}

HRESULT EApplication::ExitScope ( struct IVApplication * app, long nScopeID, _bstr_t bstrDescription, VARIANT_BOOL bErrOrCancelled ) {
    return _com_dispatch_method(this, 0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0008\x000b", app, nScopeID, (BSTR)bstrDescription, bErrOrCancelled);
}

HRESULT EApplication::QueryCancelQuit ( struct IVApplication * app, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0xcc, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", app);
}

HRESULT EApplication::QuitCanceled ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::WindowChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::ViewChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::QueryCancelWindowClose ( struct IVWindow * Window, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Window);
}

HRESULT EApplication::WindowCloseCanceled ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EApplication::QueryCancelDocumentClose ( struct IVDocument * doc, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", doc);
}

HRESULT EApplication::DocumentCloseCanceled ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

HRESULT EApplication::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EApplication::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

HRESULT EApplication::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EApplication::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

HRESULT EApplication::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EApplication::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EApplication::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EApplication::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EApplication::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EApplication::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EApplication::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EApplication::QueryCancelSuspend ( struct IVApplication * app, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0xce, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", app);
}

HRESULT EApplication::SuspendCanceled ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::BeforeSuspend ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::AfterResume ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::OnKeystrokeMessageForAddon ( struct IVMSGWrap * MSG, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", MSG);
}

HRESULT EApplication::MouseDown ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EApplication::MouseMove ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EApplication::MouseUp ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EApplication::KeyDown ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

HRESULT EApplication::KeyPress ( long KeyAscii, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", KeyAscii, CancelDefault);
}

HRESULT EApplication::KeyUp ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2ca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

HRESULT EApplication::QueryCancelSuspendEvents ( struct IVApplication * app, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0xd2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", app);
}

HRESULT EApplication::SuspendEventsCanceled ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::BeforeSuspendEvents ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::AfterResumeEvents ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

HRESULT EApplication::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EApplication::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EApplication::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EApplication::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EApplication::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

HRESULT EApplication::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EApplication::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EApplication::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EApplication::AfterRemoveHiddenInformation ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EApplication::ContainerRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EApplication::ContainerRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EApplication::CalloutRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EApplication::CalloutRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EApplication::RuleSetValidated ( struct IVValidationRuleSet * RuleSet ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", RuleSet);
}

HRESULT EApplication::QueryCancelReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38f, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", replaceShapes);
}

HRESULT EApplication::ReplaceShapesCanceled ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x390, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EApplication::BeforeReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x391, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EApplication::AfterReplaceShapes ( struct IVSelection * sel ) {
    return _com_dispatch_method(this, 0x392, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", sel);
}

//
// dispinterface EWindows wrapper method implementations
//

HRESULT EWindows::WindowOpened ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x8001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::SelectionChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::BeforeWindowClosed ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x4001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::WindowActivated ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x1080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::BeforeWindowSelDelete ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::BeforeWindowPageTurn ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::WindowTurnedToPage ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::WindowChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::ViewChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::QueryCancelWindowClose ( struct IVWindow * Window, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Window);
}

HRESULT EWindows::WindowCloseCanceled ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindows::OnKeystrokeMessageForAddon ( struct IVMSGWrap * MSG, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", MSG);
}

HRESULT EWindows::MouseDown ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EWindows::MouseMove ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EWindows::MouseUp ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EWindows::KeyDown ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

HRESULT EWindows::KeyPress ( long KeyAscii, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", KeyAscii, CancelDefault);
}

HRESULT EWindows::KeyUp ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2ca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

//
// dispinterface EWindow wrapper method implementations
//

HRESULT EWindow::SelectionChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::BeforeWindowClosed ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x4001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::WindowActivated ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x1080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::BeforeWindowSelDelete ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::BeforeWindowPageTurn ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::WindowTurnedToPage ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::WindowChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::ViewChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::QueryCancelWindowClose ( struct IVWindow * Window, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Window);
}

HRESULT EWindow::WindowCloseCanceled ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

HRESULT EWindow::OnKeystrokeMessageForAddon ( struct IVMSGWrap * MSG, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", MSG);
}

HRESULT EWindow::MouseDown ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EWindow::MouseMove ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EWindow::MouseUp ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

HRESULT EWindow::KeyDown ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

HRESULT EWindow::KeyPress ( long KeyAscii, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", KeyAscii, CancelDefault);
}

HRESULT EWindow::KeyUp ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2ca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

//
// dispinterface EDocuments wrapper method implementations
//

HRESULT EDocuments::DocumentOpened ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::DocumentCreated ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::DocumentSaved ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::DocumentSavedAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::DocumentChanged ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::BeforeDocumentClose ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocuments::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocuments::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocuments::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocuments::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocuments::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocuments::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocuments::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocuments::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocuments::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocuments::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocuments::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EDocuments::RunModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::DesignModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::BeforeDocumentSave ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::BeforeDocumentSaveAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EDocuments::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EDocuments::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EDocuments::QueryCancelDocumentClose ( struct IVDocument * doc, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", doc);
}

HRESULT EDocuments::DocumentCloseCanceled ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

HRESULT EDocuments::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EDocuments::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

HRESULT EDocuments::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EDocuments::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

HRESULT EDocuments::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EDocuments::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocuments::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocuments::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocuments::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocuments::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocuments::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocuments::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EDocuments::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EDocuments::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EDocuments::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EDocuments::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

HRESULT EDocuments::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EDocuments::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EDocuments::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EDocuments::AfterRemoveHiddenInformation ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

HRESULT EDocuments::ContainerRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EDocuments::ContainerRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EDocuments::CalloutRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EDocuments::CalloutRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EDocuments::RuleSetValidated ( struct IVValidationRuleSet * RuleSet ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", RuleSet);
}

HRESULT EDocuments::QueryCancelReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38f, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", replaceShapes);
}

HRESULT EDocuments::ReplaceShapesCanceled ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x390, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EDocuments::BeforeReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x391, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EDocuments::AfterReplaceShapes ( struct IVSelection * sel ) {
    return _com_dispatch_method(this, 0x392, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", sel);
}

HRESULT EDocuments::AfterDocumentMerge ( struct IVCoauthMergeEvent * coauthMergeObjects ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", coauthMergeObjects);
}

//
// dispinterface EStyles wrapper method implementations
//

HRESULT EStyles::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EStyles::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EStyles::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EStyles::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

HRESULT EStyles::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

//
// dispinterface EStyle wrapper method implementations
//

HRESULT EStyle::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EStyle::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

HRESULT EStyle::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

HRESULT EStyle::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

//
// dispinterface EMasters wrapper method implementations
//

HRESULT EMasters::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EMasters::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EMasters::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EMasters::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMasters::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMasters::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMasters::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMasters::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMasters::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMasters::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EMasters::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EMasters::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EMasters::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EMasters::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

HRESULT EMasters::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EMasters::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMasters::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMasters::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMasters::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMasters::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMasters::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMasters::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMasters::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMasters::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMasters::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMasters::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMasters::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

//
// dispinterface EMaster wrapper method implementations
//

HRESULT EMaster::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EMaster::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EMaster::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMaster::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMaster::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMaster::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMaster::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMaster::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMaster::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EMaster::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EMaster::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EMaster::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EMaster::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

HRESULT EMaster::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

HRESULT EMaster::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMaster::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMaster::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EMaster::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMaster::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMaster::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMaster::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMaster::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMaster::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMaster::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EMaster::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EMaster::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

//
// dispinterface EPages wrapper method implementations
//

HRESULT EPages::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EPages::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EPages::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EPages::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPages::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPages::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EPages::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EPages::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EPages::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EPages::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

HRESULT EPages::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EPages::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPages::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPages::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPages::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPages::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPages::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPages::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPages::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPages::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPages::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EPages::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EPages::ContainerRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPages::ContainerRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPages::CalloutRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPages::CalloutRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPages::QueryCancelReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38f, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", replaceShapes);
}

HRESULT EPages::ReplaceShapesCanceled ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x390, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EPages::BeforeReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x391, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EPages::AfterReplaceShapes ( struct IVSelection * sel ) {
    return _com_dispatch_method(this, 0x392, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", sel);
}

//
// dispinterface EPage wrapper method implementations
//

HRESULT EPage::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EPage::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EPage::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPage::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPage::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EPage::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EPage::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EPage::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

HRESULT EPage::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

HRESULT EPage::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

HRESULT EPage::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPage::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPage::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPage::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPage::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPage::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPage::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EPage::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EPage::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EPage::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EPage::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EPage::ContainerRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPage::ContainerRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPage::CalloutRelationshipAdded ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPage::CalloutRelationshipDeleted ( struct IVRelatedShapePairEvent * ShapePair ) {
    return _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ShapePair);
}

HRESULT EPage::QueryCancelReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38f, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", replaceShapes);
}

HRESULT EPage::ReplaceShapesCanceled ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x390, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EPage::BeforeReplaceShapes ( struct IVReplaceShapesEvent * replaceShapes ) {
    return _com_dispatch_method(this, 0x391, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", replaceShapes);
}

HRESULT EPage::AfterReplaceShapes ( struct IVSelection * sel ) {
    return _com_dispatch_method(this, 0x392, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", sel);
}

//
// dispinterface EShape wrapper method implementations
//

HRESULT EShape::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EShape::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EShape::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EShape::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT EShape::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EShape::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EShape::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EShape::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EShape::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EShape::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EShape::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

HRESULT EShape::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

HRESULT EShape::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

HRESULT EShape::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

HRESULT EShape::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

//
// dispinterface ECharacters wrapper method implementations
//

HRESULT ECharacters::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

//
// dispinterface ECell wrapper method implementations
//

HRESULT ECell::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT ECell::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

//
// dispinterface IVDispExtender wrapper method implementations
//

_bstr_t IVDispExtender::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

IUnknownPtr IVDispExtender::GetObject ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, DISPID_Object, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

IUnknownPtr IVDispExtender::GetParent ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0x80010008, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

HRESULT IVDispExtender::Delete ( ) {
    return _com_dispatch_method(this, DISPID_Delete, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::Index ( ) {
    return _com_dispatch_method(this, 0xfffffcdc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

IVShapePtr IVDispExtender::GetShape ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010100, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

HRESULT IVDispExtender::VoidGroup ( ) {
    return _com_dispatch_method(this, 0x8001012d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::BringForward ( ) {
    return _com_dispatch_method(this, 0x8001012e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::BringToFront ( ) {
    return _com_dispatch_method(this, 0x8001012f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::ConvertToGroup ( ) {
    return _com_dispatch_method(this, 0x80010130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::SendBackward ( ) {
    return _com_dispatch_method(this, 0x80010134, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::SendToBack ( ) {
    return _com_dispatch_method(this, 0x80010135, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

IVDocumentPtr IVDispExtender::GetDocument ( ) {
    struct IVDocument * _result = 0;
    _com_dispatch_method(this, 0x8001012c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVDocumentPtr(_result, false);
}

IDispatchPtr IVDispExtender::GetShapeParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x80010138, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

IVApplicationPtr IVDispExtender::GetApplication ( ) {
    struct IVApplication * _result = 0;
    _com_dispatch_method(this, 0x80010101, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVApplicationPtr(_result, false);
}

IVMasterPtr IVDispExtender::GetMaster ( ) {
    struct IVMaster * _result = 0;
    _com_dispatch_method(this, 0x80010115, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVMasterPtr(_result, false);
}

IVCellPtr IVDispExtender::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    _com_dispatch_method(this, 0x8001010d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0008", (BSTR)localeSpecificCellName);
    return IVCellPtr(_result, false);
}

IVCellPtr IVDispExtender::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    _com_dispatch_method(this, 0x8001010e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0002\x0002\x0002", Section, Row, Column);
    return IVCellPtr(_result, false);
}

_bstr_t IVDispExtender::GetData1 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8001010f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutData1 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001010f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

_bstr_t IVDispExtender::GetData2 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010110, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutData2 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

_bstr_t IVDispExtender::GetData3 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010111, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutData3 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010111, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

_bstr_t IVDispExtender::GetHelp ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010112, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutHelp ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010112, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

_bstr_t IVDispExtender::GetNameID ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010104, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

HRESULT IVDispExtender::ShapeCopy ( ) {
    return _com_dispatch_method(this, 0x80010109, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::ShapeCut ( ) {
    return _com_dispatch_method(this, 0x8001010a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::ShapeDelete ( ) {
    return _com_dispatch_method(this, 0x8001010b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IVDispExtender::VoidShapeDuplicate ( ) {
    return _com_dispatch_method(this, 0x8001010c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short IVDispExtender::GetRowCount ( short Section ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010118, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002", Section);
    return _result;
}

short IVDispExtender::AddSection ( short Section ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010119, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002", Section);
    return _result;
}

HRESULT IVDispExtender::DeleteSection ( short Section ) {
    return _com_dispatch_method(this, 0x8001011a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002", Section);
}

short IVDispExtender::AddRow ( short Section, short Row, short RowTag ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001011b, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002", Section, Row, RowTag);
    return _result;
}

HRESULT IVDispExtender::DeleteRow ( short Section, short Row ) {
    return _com_dispatch_method(this, 0x8001011c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002", Section, Row);
}

short IVDispExtender::GetRowsCellCount ( short Section, short Row ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001011d, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002", Section, Row);
    return _result;
}

short IVDispExtender::GetRowType ( short Section, short Row ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001011e, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002", Section, Row);
    return _result;
}

void IVDispExtender::PutRowType ( short Section, short Row, short _arg3 ) {
    _com_dispatch_method(this, 0x8001011e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0002", Section, Row, _arg3);
}

HRESULT IVDispExtender::SetCenter ( double xPos, double yPos ) {
    return _com_dispatch_method(this, 0x8001011f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005", xPos, yPos);
}

IVConnectsPtr IVDispExtender::GetConnects ( ) {
    struct IVConnects * _result = 0;
    _com_dispatch_method(this, 0x80010122, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVConnectsPtr(_result, false);
}

short IVDispExtender::GetShapeIndex16 ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010123, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

_bstr_t IVDispExtender::GetStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010124, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010124, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

void IVDispExtender::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

_bstr_t IVDispExtender::GetLineStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010125, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutLineStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010125, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

void IVDispExtender::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010129, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

_bstr_t IVDispExtender::GetFillStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010126, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

void IVDispExtender::PutFillStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010126, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

void IVDispExtender::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001012a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

HRESULT IVDispExtender::Export ( _bstr_t FileName ) {
    return _com_dispatch_method(this, 0x80010139, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)FileName);
}

_bstr_t IVDispExtender::GetUniqueID ( short fUniqueID ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8001013d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, 
        L"\x0002", fUniqueID);
    return _bstr_t(_result, false);
}

IVPagePtr IVDispExtender::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    _com_dispatch_method(this, 0x8001013e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVPagePtr(_result, false);
}

IVMasterPtr IVDispExtender::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    _com_dispatch_method(this, 0x8001013f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVMasterPtr(_result, false);
}

IVShapePtr IVDispExtender::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010140, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

short IVDispExtender::GetSectionExists ( short Section, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010141, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002", Section, fExistsLocally);
    return _result;
}

short IVDispExtender::GetRowExists ( short Section, short Row, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010142, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002", Section, Row, fExistsLocally);
    return _result;
}

short IVDispExtender::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010143, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0008\x0002", (BSTR)localeSpecificCellName, fExistsLocally);
    return _result;
}

short IVDispExtender::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010144, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002\x0002", Section, Row, Column, fExistsLocally);
    return _result;
}

short IVDispExtender::GetLayerCount ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010145, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

IVLayerPtr IVDispExtender::GetLayer ( short Index ) {
    struct IVLayer * _result = 0;
    _com_dispatch_method(this, 0x80010146, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0002", Index);
    return IVLayerPtr(_result, false);
}

short IVDispExtender::AddNamedRow ( short Section, _bstr_t RowName, short RowTag ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010147, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002\x0008\x0002", Section, (BSTR)RowName, RowTag);
    return _result;
}

short IVDispExtender::AddRows ( short Section, short Row, short RowTag, short RowCount ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010148, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002\x0002", Section, Row, RowTag, RowCount);
    return _result;
}

IVEventListPtr IVDispExtender::GetEventList ( ) {
    struct IVEventList * _result = 0;
    _com_dispatch_method(this, 0x80010149, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVEventListPtr(_result, false);
}

short IVDispExtender::GetPersistsEvents ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001014a, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

_bstr_t IVDispExtender::GetClassID ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010156, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

IDispatchPtr IVDispExtender::GetShapeObject ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x80010158, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

IVWindowPtr IVDispExtender::OpenSheetWindow ( ) {
    struct IVWindow * _result = 0;
    _com_dispatch_method(this, 0x8001015a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IVWindowPtr(_result, false);
}

short IVDispExtender::GetShapeID16 ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001015b, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

HRESULT IVDispExtender::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    return _com_dispatch_method(this, 0x8001015d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6002\x600c", SRCStream, formulaArray);
}

HRESULT IVDispExtender::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    return _com_dispatch_method(this, 0x8001015e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6002\x0002\x600c\x600c", SRCStream, Flags, UnitsNamesOrCodes, resultArray);
}

short IVDispExtender::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001015f, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x6002\x600c\x0002", SRCStream, formulaArray, Flags);
    return _result;
}

short IVDispExtender::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010160, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x6002\x600c\x600c\x0002", SRCStream, UnitsNamesOrCodes, resultArray, Flags);
    return _result;
}

IVConnectsPtr IVDispExtender::GetFromConnects ( ) {
    struct IVConnects * _result = 0;
    _com_dispatch_method(this, 0x80010161, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVConnectsPtr(_result, false);
}

HRESULT IVDispExtender::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    return _com_dispatch_method(this, 0x80010163, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x4005\x4005\x4005\x4005", Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
}

short IVDispExtender::HitTest ( double xPos, double yPos, double Tolerance ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010164, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0005\x0005\x0005", xPos, yPos, Tolerance);
    return _result;
}

IVHyperlinkPtr IVDispExtender::GetHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    _com_dispatch_method(this, 0x80010165, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVHyperlinkPtr(_result, false);
}

_bstr_t IVDispExtender::GetProgID ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010166, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

short IVDispExtender::GetObjectIsInherited ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010167, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

long IVDispExtender::GetShapeID ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x8001016b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

long IVDispExtender::GetShapeIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x8001016c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

IVShapePtr IVDispExtender::Group ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010182, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

IVShapePtr IVDispExtender::ShapeDuplicate ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010183, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

HRESULT IVDispExtender::VisualBoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    return _com_dispatch_method(this, 0x80010184, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x4005\x4005\x4005\x4005", Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
}

//
// interface IVisEventProc wrapper method implementations
//

_variant_t IVisEventProc::VisEventProc ( short nEventCode, IDispatch * pSourceObj, long nEventID, long nEventSeqNum, IDispatch * pSubjectObj, const _variant_t & vMoreInfo ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_VisEventProc(nEventCode, pSourceObj, nEventID, nEventSeqNum, pSubjectObj, vMoreInfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// dispinterface ESection wrapper method implementations
//

HRESULT ESection::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT ESection::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

//
// dispinterface ERow wrapper method implementations
//

HRESULT ERow::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

HRESULT ERow::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

//
// dispinterface EDataRecordset wrapper method implementations
//

HRESULT EDataRecordset::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

HRESULT EDataRecordset::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

//
// dispinterface EDataRecordsets wrapper method implementations
//

HRESULT EDataRecordsets::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EDataRecordsets::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

HRESULT EDataRecordsets::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

//
// interface IVApplication wrapper method implementations
//

IVDocumentPtr IVApplication::GetActiveDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVApplication::GetActivePage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ActivePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVWindowPtr IVApplication::GetActiveWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVApplicationPtr IVApplication::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentsPtr IVApplication::GetDocuments ( ) {
    struct IVDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentsPtr(_result, false);
}

short IVApplication::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVApplication::GetOnDataChangeDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_OnDataChangeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutOnDataChangeDelay ( long lpi4Ret ) {
    HRESULT _hr = put_OnDataChangeDelay(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplication::GetProcessID ( ) {
    long _result = 0;
    HRESULT _hr = get_ProcessID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVApplication::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplication::Redo ( ) {
    HRESULT _hr = raw_Redo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVApplication::GetScreenUpdating ( ) {
    short _result = 0;
    HRESULT _hr = get_ScreenUpdating(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutScreenUpdating ( short lpi2Ret ) {
    HRESULT _hr = put_ScreenUpdating(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVApplication::Undo ( ) {
    HRESULT _hr = raw_Undo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVApplication::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVApplication::GetWindowHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_WindowHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowsPtr IVApplication::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

long IVApplication::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetIsVisio16 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetIsVisio32 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVApplication::GetWindowHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetInstanceHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_InstanceHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVApplication::GetInstanceHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVUIObjectPtr IVApplication::GetBuiltInMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

IVUIObjectPtr IVApplication::GetBuiltInToolbars ( short fIgnored ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInToolbars(fIgnored, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

IVUIObjectPtr IVApplication::GetCustomMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

HRESULT IVApplication::SetCustomMenus ( struct IVUIObject * MenusObject ) {
    HRESULT _hr = raw_SetCustomMenus(MenusObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVApplication::GetCustomMenusFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomMenusFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutCustomMenusFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomMenusFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVApplication::ClearCustomMenus ( ) {
    HRESULT _hr = raw_ClearCustomMenus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVUIObjectPtr IVApplication::GetCustomToolbars ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

HRESULT IVApplication::SetCustomToolbars ( struct IVUIObject * ToolbarsObject ) {
    HRESULT _hr = raw_SetCustomToolbars(ToolbarsObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVApplication::GetCustomToolbarsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomToolbarsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutCustomToolbarsFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomToolbarsFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVApplication::ClearCustomToolbars ( ) {
    HRESULT _hr = raw_ClearCustomToolbars();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVApplication::GetAddonPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddonPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutAddonPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_AddonPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetDrawingPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawingPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutDrawingPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_DrawingPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetFilterPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutFilterPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FilterPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetHelpPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutHelpPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_HelpPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetStartupPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartupPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutStartupPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StartupPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetStencilPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StencilPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutStencilPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StencilPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetTemplatePaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplatePaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutTemplatePaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TemplatePaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutUserName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetPromptForSummary ( ) {
    short _result = 0;
    HRESULT _hr = get_PromptForSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutPromptForSummary ( short lpi2Ret ) {
    HRESULT _hr = put_PromptForSummary(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVAddonsPtr IVApplication::GetAddons ( ) {
    struct IVAddons * _result = 0;
    HRESULT _hr = get_Addons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonsPtr(_result, false);
}

HRESULT IVApplication::SaveWorkspaceAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveWorkspaceAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplication::DoCmd ( short CommandID ) {
    HRESULT _hr = raw_DoCmd(CommandID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVApplication::GetProfileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProfileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVApplication::GetEventInfo ( long eventSeqNum ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventInfo(eventSeqNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVEventListPtr IVApplication::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVApplication::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetActive ( ) {
    short _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetDeferRecalc ( ) {
    short _result = 0;
    HRESULT _hr = get_DeferRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutDeferRecalc ( short lpi2Ret ) {
    HRESULT _hr = put_DeferRecalc(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetAlertResponse ( ) {
    short _result = 0;
    HRESULT _hr = get_AlertResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutAlertResponse ( short lpi2Ret ) {
    HRESULT _hr = put_AlertResponse(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetShowProgress ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutShowProgress ( short lpi2Ret ) {
    HRESULT _hr = put_ShowProgress(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IVApplication::GetVbe ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vbe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

short IVApplication::GetShowMenus ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutShowMenus ( short lpi2Ret ) {
    HRESULT _hr = put_ShowMenus(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetToolbarStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_ToolbarStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutToolbarStyle ( short lpi2Ret ) {
    HRESULT _hr = put_ToolbarStyle(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetShowStatusBar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowStatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutShowStatusBar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowStatusBar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetEventsEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_EventsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutEventsEnabled ( short lpi2Ret ) {
    HRESULT _hr = put_EventsEnabled(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::FormatResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResult(StringOrNumber, UnitsIn, UnitsOut, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IVApplication::ConvertResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut ) {
    double _result = 0;
    HRESULT _hr = raw_ConvertResult(StringOrNumber, UnitsIn, UnitsOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVApplication::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVApplication::EnumDirectories ( _bstr_t PathsString, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_EnumDirectories(PathsString, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVApplication::GetTraceFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_TraceFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutTraceFlags ( long lpi4Ret ) {
    HRESULT _hr = put_TraceFlags(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVApplication::PurgeUndo ( ) {
    HRESULT _hr = raw_PurgeUndo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVApplication::QueueMarkerEvent ( _bstr_t ContextString ) {
    long _result = 0;
    HRESULT _hr = raw_QueueMarkerEvent(ContextString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetShowToolbar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutShowToolbar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowToolbar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplication::GetLiveDynamics ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LiveDynamics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutLiveDynamics ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_LiveDynamics(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplication::GetAutoLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutAutoLayout ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_AutoLayout(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplication::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplication::BeginUndoScope ( _bstr_t bstrUndoScopeName ) {
    long _result = 0;
    HRESULT _hr = raw_BeginUndoScope(bstrUndoScopeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVApplication::EndUndoScope ( long nScopeID, VARIANT_BOOL bCommit ) {
    HRESULT _hr = raw_EndUndoScope(nScopeID, bCommit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplication::AddUndoUnit ( IUnknown * pUndoUnit ) {
    HRESULT _hr = raw_AddUndoUnit(pUndoUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVApplication::GetCommandLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommandLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVApplication::GetIsUndoingOrRedoing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUndoingOrRedoing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVApplication::GetCurrentScope ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentScope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVApplication::GetIsInScope ( long nCmdID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInScope(nCmdID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVApplication::Getold_Addins ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_old_Addins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IVApplication::GetProductName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVApplication::GetUndoEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutUndoEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_UndoEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplication::GetShowChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutShowChanges ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_ShowChanges(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVApplication::GetTypelibMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetTypelibMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplication::GetAutoRecoverInterval ( ) {
    short _result = 0;
    HRESULT _hr = get_AutoRecoverInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutAutoRecoverInterval ( short lpi2Ret ) {
    HRESULT _hr = put_AutoRecoverInterval(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplication::GetInhibitSelectChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InhibitSelectChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutInhibitSelectChange ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_InhibitSelectChange(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplication::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutActivePrinter ( _bstr_t pbstrPrinterName ) {
    HRESULT _hr = put_ActivePrinter(pbstrPrinterName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IVApplication::GetAvailablePrinters ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePrinters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVApplication::RenameCurrentScope ( _bstr_t bstrScopeName ) {
    HRESULT _hr = raw_RenameCurrentScope(bstrScopeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplication::InvokeHelp ( _bstr_t bstrHelpFileName, long Command, long Data ) {
    HRESULT _hr = raw_InvokeHelp(bstrHelpFileName, Command, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IVApplication::GetCommandBars ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IVApplication::GetBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVApplication::GetCOMAddIns ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IVApplication::GetDefaultPageUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultPageUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVApplication::PutDefaultPageUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultPageUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVApplication::GetDefaultTextUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultTextUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVApplication::PutDefaultTextUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultTextUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVApplication::GetDefaultAngleUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultAngleUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVApplication::PutDefaultAngleUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultAngleUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVApplication::GetDefaultDurationUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultDurationUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVApplication::PutDefaultDurationUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultDurationUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplication::GetFullBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVApplication::OnComponentEnterState ( enum VisOnComponentEnterCodes uStateID, VARIANT_BOOL bEnter ) {
    HRESULT _hr = raw_OnComponentEnterState(uStateID, bEnter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVApplication::GetVBAEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VBAEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisZoomBehavior IVApplication::GetDefaultZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_DefaultZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutDefaultZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_DefaultZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVApplication::GetUsageStatistic ( long nWhichStatistic ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUsageStatistic(nWhichStatistic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IFontDisp * IVApplication::GetDialogFont ( ) {
    IFontDisp * _result = 0;
    HRESULT _hr = get_DialogFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVApplication::GetLanguageHelp ( ) {
    long _result = 0;
    HRESULT _hr = get_LanguageHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVApplication::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

_bstr_t IVApplication::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IVApplication::GetConnectorToolDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ConnectorToolDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVApplicationSettingsPtr IVApplication::GetSettings ( ) {
    struct IVApplicationSettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationSettingsPtr(_result, false);
}

_bstr_t IVApplication::FormatResultEx ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format, long LangID, long CalendarID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResultEx(StringOrNumber, UnitsIn, UnitsOut, Format, LangID, CalendarID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr IVApplication::GetSaveAsWebObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SaveAsWebObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IVApplication::GetMsoDebugOptions ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IVApplication::GetMyShapesPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyShapesPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplication::PutMyShapesPath ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_MyShapesPath(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr IVApplication::GetDefaultRectangleDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_DefaultRectangleDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL IVApplication::GetDataFeaturesEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataFeaturesEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVApplication::GetLanguageSettings ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IVApplication::GetAssistance ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT IVApplication::RegisterRibbonX ( IUnknown * SourceAddOn, struct IVDocument * TargetDocument, enum VisRibbonXModes TargetModes, _bstr_t FriendlyName ) {
    HRESULT _hr = raw_RegisterRibbonX(SourceAddOn, TargetDocument, TargetModes, FriendlyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplication::UnregisterRibbonX ( IUnknown * SourceAddOn, struct IVDocument * TargetDocument ) {
    HRESULT _hr = raw_UnregisterRibbonX(SourceAddOn, TargetDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVApplication::GetPreviewEnabled ( _bstr_t GalleryName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPreviewEnabled(GalleryName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVApplication::SetPreviewEnabled ( _bstr_t GalleryName, VARIANT_BOOL OnOrOff ) {
    HRESULT _hr = raw_SetPreviewEnabled(GalleryName, OnOrOff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVApplication::GetBuiltInStencilFile ( enum VisBuiltInStencilTypes StencilType, enum VisMeasurementSystem MeasurementSystem ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBuiltInStencilFile(StencilType, MeasurementSystem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVApplication::GetCustomStencilFile ( enum VisBuiltInStencilTypes StencilType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCustomStencilFile(StencilType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVApplication::GetDeferRelationshipRecalc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeferRelationshipRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplication::PutDeferRelationshipRecalc ( VARIANT_BOOL lpi2Ret ) {
    HRESULT _hr = put_DeferRelationshipRecalc(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisEdition IVApplication::GetCurrentEdition ( ) {
    enum VisEdition _result;
    HRESULT _hr = get_CurrentEdition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

__int64 IVApplication::GetInstanceHandle64 ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_InstanceHandle64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVCurve wrapper method implementations
//

IVApplicationPtr IVCurve::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVCurve::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCurve::GetClosed ( ) {
    short _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVCurve::Points ( double Tolerance, SAFEARRAY * * xyArray ) {
    HRESULT _hr = raw_Points(Tolerance, xyArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double IVCurve::GetStart ( ) {
    double _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVCurve::GetEnd ( ) {
    double _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVCurve::Point ( double t, double * x, double * y ) {
    HRESULT _hr = raw_Point(t, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVCurve::PointAndDerivatives ( double t, short n, double * x, double * y, double * dxdt, double * dydt, double * ddxdt, double * ddydt ) {
    HRESULT _hr = raw_PointAndDerivatives(t, n, x, y, dxdt, dydt, ddxdt, ddydt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVPath wrapper method implementations
//

IVApplicationPtr IVPath::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVPath::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCurvePtr IVPath::GetItem16 ( short Index ) {
    struct IVCurve * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCurvePtr(_result, false);
}

short IVPath::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVPath::GetClosed ( ) {
    short _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVPath::Points ( double Tolerance, SAFEARRAY * * xyArray ) {
    HRESULT _hr = raw_Points(Tolerance, xyArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVCurvePtr IVPath::GetItem ( long Index ) {
    struct IVCurve * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCurvePtr(_result, false);
}

long IVPath::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVPath::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVPaths wrapper method implementations
//

IVApplicationPtr IVPaths::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVPaths::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPathPtr IVPaths::GetItem16 ( short Index ) {
    struct IVPath * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathPtr(_result, false);
}

short IVPaths::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPathPtr IVPaths::GetItem ( long Index ) {
    struct IVPath * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathPtr(_result, false);
}

long IVPaths::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVPaths::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVAddon wrapper method implementations
//

IVApplicationPtr IVAddon::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVAddon::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVAddon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVAddon::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVAddon::GetEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVAddon::Run ( _bstr_t ArgString ) {
    HRESULT _hr = raw_Run(ArgString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVAddon::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVAddons wrapper method implementations
//

IVApplicationPtr IVAddons::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVAddons::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVAddonPtr IVAddons::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVAddon * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonPtr(_result, false);
}

short IVAddons::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVAddonPtr IVAddons::Add ( _bstr_t FileName ) {
    struct IVAddon * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonPtr(_result, false);
}

HRESULT IVAddons::GetNames ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetNames(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IVAddons::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVAddonPtr IVAddons::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVAddon * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonPtr(_result, false);
}

HRESULT IVAddons::GetNamesU ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetNamesU(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVApplicationSettings wrapper method implementations
//

IVApplicationPtr IVApplicationSettings::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

enum VisObjectTypes IVApplicationSettings::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVApplicationSettings::GetDrawingAids ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawingAids(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutDrawingAids ( VARIANT_BOOL RetVal ) {
    HRESULT _hr = put_DrawingAids(RetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthRulerX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthRulerX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthRulerX ( long strength ) {
    HRESULT _hr = put_SnapStrengthRulerX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthRulerY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthRulerY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthRulerY ( long strength ) {
    HRESULT _hr = put_SnapStrengthRulerY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthGridX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGridX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthGridX ( long strength ) {
    HRESULT _hr = put_SnapStrengthGridX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthGridY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGridY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthGridY ( long strength ) {
    HRESULT _hr = put_SnapStrengthGridY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthGuidesX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGuidesX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthGuidesX ( long strength ) {
    HRESULT _hr = put_SnapStrengthGuidesX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthGuidesY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGuidesY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthGuidesY ( long strength ) {
    HRESULT _hr = put_SnapStrengthGuidesY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthPointsX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthPointsX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthPointsX ( long strength ) {
    HRESULT _hr = put_SnapStrengthPointsX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthPointsY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthPointsY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthPointsY ( long strength ) {
    HRESULT _hr = put_SnapStrengthPointsY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthGeometryX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGeometryX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthGeometryX ( long strength ) {
    HRESULT _hr = put_SnapStrengthGeometryX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthGeometryY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGeometryY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthGeometryY ( long strength ) {
    HRESULT _hr = put_SnapStrengthGeometryY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthExtensionsX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthExtensionsX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthExtensionsX ( long strength ) {
    HRESULT _hr = put_SnapStrengthExtensionsX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetSnapStrengthExtensionsY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthExtensionsY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSnapStrengthExtensionsY ( long strength ) {
    HRESULT _hr = put_SnapStrengthExtensionsY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetShowFileSaveWarnings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFileSaveWarnings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutShowFileSaveWarnings ( VARIANT_BOOL Show ) {
    HRESULT _hr = put_ShowFileSaveWarnings(Show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetShowFileOpenWarnings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFileOpenWarnings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutShowFileOpenWarnings ( VARIANT_BOOL Show ) {
    HRESULT _hr = put_ShowFileOpenWarnings(Show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisDefaultSaveFormats IVApplicationSettings::GetDefaultSaveFormat ( ) {
    enum VisDefaultSaveFormats _result;
    HRESULT _hr = get_DefaultSaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutDefaultSaveFormat ( enum VisDefaultSaveFormats pFormatType ) {
    HRESULT _hr = put_DefaultSaveFormat(pFormatType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetDrawingPageColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DrawingPageColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutDrawingPageColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_DrawingPageColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetDrawingBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DrawingBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutDrawingBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_DrawingBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetDrawingBackgroundColorGradient ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DrawingBackgroundColorGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutDrawingBackgroundColorGradient ( OLE_COLOR pColor ) {
    HRESULT _hr = put_DrawingBackgroundColorGradient(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetStencilBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StencilBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutStencilBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_StencilBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetStencilBackgroundColorGradient ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StencilBackgroundColorGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutStencilBackgroundColorGradient ( OLE_COLOR pColor ) {
    HRESULT _hr = put_StencilBackgroundColorGradient(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetStencilTextColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StencilTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutStencilTextColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_StencilTextColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetPrintPreviewBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PrintPreviewBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutPrintPreviewBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_PrintPreviewBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetFullScreenBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FullScreenBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutFullScreenBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_FullScreenBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetShowStartupDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutShowStartupDialog ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_ShowStartupDialog(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetShowSmartTags ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutShowSmartTags ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_ShowSmartTags(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisTextDisplayQualityTypes IVApplicationSettings::GetTextDisplayQuality ( ) {
    enum VisTextDisplayQualityTypes _result;
    HRESULT _hr = get_TextDisplayQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutTextDisplayQuality ( enum VisTextDisplayQualityTypes pTextQuality ) {
    HRESULT _hr = put_TextDisplayQuality(pTextQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetHigherQualityShapeDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HigherQualityShapeDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutHigherQualityShapeDisplay ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_HigherQualityShapeDisplay(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetSmoothDrawing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmoothDrawing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSmoothDrawing ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_SmoothDrawing(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetStencilCharactersPerLine ( ) {
    long _result = 0;
    HRESULT _hr = get_StencilCharactersPerLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutStencilCharactersPerLine ( long pCharCount ) {
    HRESULT _hr = put_StencilCharactersPerLine(pCharCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetStencilLinesPerMaster ( ) {
    long _result = 0;
    HRESULT _hr = get_StencilLinesPerMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutStencilLinesPerMaster ( long pLineCount ) {
    HRESULT _hr = put_StencilLinesPerMaster(pLineCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplicationSettings::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplicationSettings::PutUserName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVApplicationSettings::GetUserInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVApplicationSettings::PutUserInitials ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserInitials(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetZoomOnRoll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZoomOnRoll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutZoomOnRoll ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ZoomOnRoll(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetUndoLevels ( ) {
    long _result = 0;
    HRESULT _hr = get_UndoLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutUndoLevels ( long pNumLevels ) {
    HRESULT _hr = put_UndoLevels(pNumLevels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetRecentFilesListSize ( ) {
    long _result = 0;
    HRESULT _hr = get_RecentFilesListSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRecentFilesListSize ( long pNumFiles ) {
    HRESULT _hr = put_RecentFilesListSize(pNumFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetCenterSelectionOnZoom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterSelectionOnZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutCenterSelectionOnZoom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CenterSelectionOnZoom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetConnectorSplittingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConnectorSplittingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutConnectorSplittingEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ConnectorSplittingEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRegionalUIOptions IVApplicationSettings::GetAsianTextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_AsianTextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutAsianTextUI ( enum VisRegionalUIOptions pAsianTextUIOption ) {
    HRESULT _hr = put_AsianTextUI(pAsianTextUIOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRegionalUIOptions IVApplicationSettings::GetComplexTextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_ComplexTextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutComplexTextUI ( enum VisRegionalUIOptions pComplexTextUIOption ) {
    HRESULT _hr = put_ComplexTextUI(pComplexTextUIOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRegionalUIOptions IVApplicationSettings::GetKanaFindAndReplace ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_KanaFindAndReplace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutKanaFindAndReplace ( enum VisRegionalUIOptions pKanaOption ) {
    HRESULT _hr = put_KanaFindAndReplace(pKanaOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetFreeformDrawingPrecision ( ) {
    long _result = 0;
    HRESULT _hr = get_FreeformDrawingPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutFreeformDrawingPrecision ( long plVal ) {
    HRESULT _hr = put_FreeformDrawingPrecision(plVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetFreeformDrawingSmoothing ( ) {
    long _result = 0;
    HRESULT _hr = get_FreeformDrawingSmoothing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutFreeformDrawingSmoothing ( long plVal ) {
    HRESULT _hr = put_FreeformDrawingSmoothing(plVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetDeveloperMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeveloperMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutDeveloperMode ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DeveloperMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetShowChooseDrawingTypePane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChooseDrawingTypePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutShowChooseDrawingTypePane ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_ShowChooseDrawingTypePane(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetShowShapeSearchPane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowShapeSearchPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutShowShapeSearchPane ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowShapeSearchPane(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetApplyThemesOnShapeAdd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyThemesOnShapeAdd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutApplyThemesOnShapeAdd ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ApplyThemesOnShapeAdd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRegionalUIOptions IVApplicationSettings::GetSATextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_SATextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisRegionalUIOptions IVApplicationSettings::GetBIDITextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_BIDITextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisRegionalUIOptions IVApplicationSettings::GetKashidaTextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_KashidaTextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVApplicationSettings::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVApplicationSettings::GetShowMoreShapeHandlesOnHover ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowMoreShapeHandlesOnHover(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutShowMoreShapeHandlesOnHover ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowMoreShapeHandlesOnHover(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetEnableAutoConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAutoConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutEnableAutoConnect ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAutoConnect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetApplyBackgroundToDocument ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyBackgroundToDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutApplyBackgroundToDocument ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ApplyBackgroundToDocument(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetTransitionsEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransitionsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutTransitionsEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TransitionsEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetEnableFormulaAutoComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableFormulaAutoComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutEnableFormulaAutoComplete ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableFormulaAutoComplete(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetDeleteConnectorsEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteConnectorsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutDeleteConnectorsEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DeleteConnectorsEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetRecentTemplatesListSize ( ) {
    long _result = 0;
    HRESULT _hr = get_RecentTemplatesListSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRecentTemplatesListSize ( long pNumFiles ) {
    HRESULT _hr = put_RecentTemplatesListSize(pNumFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVApplicationSettings::SetRasterExportResolution ( enum VisRasterExportResolution resolution, double Width, double Height, enum VisRasterExportResolutionUnits resolutionUnits ) {
    HRESULT _hr = raw_SetRasterExportResolution(resolution, Width, Height, resolutionUnits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplicationSettings::GetRasterExportResolution ( enum VisRasterExportResolution * pResolution, double * pWidth, double * pHeight, enum VisRasterExportResolutionUnits * pResolutionUnits ) {
    HRESULT _hr = raw_GetRasterExportResolution(pResolution, pWidth, pHeight, pResolutionUnits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplicationSettings::SetRasterExportSize ( enum VisRasterExportSize size, double Width, double Height, enum VisRasterExportSizeUnits sizeUnits ) {
    HRESULT _hr = raw_SetRasterExportSize(size, Width, Height, sizeUnits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVApplicationSettings::GetRasterExportSize ( enum VisRasterExportSize * pSize, double * pWidth, double * pHeight, enum VisRasterExportSizeUnits * pSizeUnits ) {
    HRESULT _hr = raw_GetRasterExportSize(pSize, pWidth, pHeight, pSizeUnits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum VisRasterExportDataFormat IVApplicationSettings::GetRasterExportDataFormat ( ) {
    enum VisRasterExportDataFormat _result;
    HRESULT _hr = get_RasterExportDataFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportDataFormat ( enum VisRasterExportDataFormat pFormat ) {
    HRESULT _hr = put_RasterExportDataFormat(pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRasterExportDataCompression IVApplicationSettings::GetRasterExportDataCompression ( ) {
    enum VisRasterExportDataCompression _result;
    HRESULT _hr = get_RasterExportDataCompression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportDataCompression ( enum VisRasterExportDataCompression pCompressionType ) {
    HRESULT _hr = put_RasterExportDataCompression(pCompressionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRasterExportColorReduction IVApplicationSettings::GetRasterExportColorReduction ( ) {
    enum VisRasterExportColorReduction _result;
    HRESULT _hr = get_RasterExportColorReduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportColorReduction ( enum VisRasterExportColorReduction pReduction ) {
    HRESULT _hr = put_RasterExportColorReduction(pReduction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRasterExportColorFormat IVApplicationSettings::GetRasterExportColorFormat ( ) {
    enum VisRasterExportColorFormat _result;
    HRESULT _hr = get_RasterExportColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportColorFormat ( enum VisRasterExportColorFormat pFormat ) {
    HRESULT _hr = put_RasterExportColorFormat(pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRasterExportOperation IVApplicationSettings::GetRasterExportOperation ( ) {
    enum VisRasterExportOperation _result;
    HRESULT _hr = get_RasterExportOperation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportOperation ( enum VisRasterExportOperation pOperation ) {
    HRESULT _hr = put_RasterExportOperation(pOperation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRasterExportRotation IVApplicationSettings::GetRasterExportRotation ( ) {
    enum VisRasterExportRotation _result;
    HRESULT _hr = get_RasterExportRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportRotation ( enum VisRasterExportRotation pRotation ) {
    HRESULT _hr = put_RasterExportRotation(pRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRasterExportFlip IVApplicationSettings::GetRasterExportFlip ( ) {
    enum VisRasterExportFlip _result;
    HRESULT _hr = get_RasterExportFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportFlip ( enum VisRasterExportFlip plFlip ) {
    HRESULT _hr = put_RasterExportFlip(plFlip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetRasterExportBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_RasterExportBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_RasterExportBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVApplicationSettings::GetRasterExportTransparencyColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_RasterExportTransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportTransparencyColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_RasterExportTransparencyColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetRasterExportUseTransparencyColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RasterExportUseTransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportUseTransparencyColor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RasterExportUseTransparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetRasterExportQuality ( ) {
    long _result = 0;
    HRESULT _hr = get_RasterExportQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRasterExportQuality ( long plQuality ) {
    HRESULT _hr = put_RasterExportQuality(plQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisSVGExportFormat IVApplicationSettings::GetSVGExportFormat ( ) {
    enum VisSVGExportFormat _result;
    HRESULT _hr = get_SVGExportFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutSVGExportFormat ( enum VisSVGExportFormat plFormat ) {
    HRESULT _hr = put_SVGExportFormat(plFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetEnterCommitsText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnterCommitsText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutEnterCommitsText ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnterCommitsText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVApplicationSettings::GetUseLocalUserInfo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalUserInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutUseLocalUserInfo ( VARIANT_BOOL pfUseLocalUserInfo ) {
    HRESULT _hr = put_UseLocalUserInfo(pfUseLocalUserInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVApplicationSettings::GetRecentFoldersListSize ( ) {
    long _result = 0;
    HRESULT _hr = get_RecentFoldersListSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVApplicationSettings::PutRecentFoldersListSize ( long pNumFolders ) {
    HRESULT _hr = put_RecentFoldersListSize(pNumFolders);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVMSGWrap wrapper method implementations
//

IVApplicationPtr IVMSGWrap::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVMSGWrap::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVMSGWrap::Gethwnd ( ) {
    long _result = 0;
    HRESULT _hr = get_hwnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMSGWrap::Puthwnd ( long lpi4Ret ) {
    HRESULT _hr = put_hwnd(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVMSGWrap::Getmessage ( ) {
    long _result = 0;
    HRESULT _hr = get_message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMSGWrap::Putmessage ( long lpi4Ret ) {
    HRESULT _hr = put_message(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVMSGWrap::GetwParam ( ) {
    long _result = 0;
    HRESULT _hr = get_wParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMSGWrap::PutwParam ( long lpi4Ret ) {
    HRESULT _hr = put_wParam(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVMSGWrap::GetlParam ( ) {
    long _result = 0;
    HRESULT _hr = get_lParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMSGWrap::PutlParam ( long lpi4Ret ) {
    HRESULT _hr = put_lParam(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVMSGWrap::Getposttime ( ) {
    long _result = 0;
    HRESULT _hr = get_posttime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMSGWrap::Putposttime ( long lpi4Ret ) {
    HRESULT _hr = put_posttime(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVMSGWrap::Getptx ( ) {
    long _result = 0;
    HRESULT _hr = get_ptx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMSGWrap::Putptx ( long lpi4Ret ) {
    HRESULT _hr = put_ptx(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVMSGWrap::Getpty ( ) {
    long _result = 0;
    HRESULT _hr = get_pty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMSGWrap::Putpty ( long lpi4Ret ) {
    HRESULT _hr = put_pty(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVDocument wrapper method implementations
//

IVApplicationPtr IVDocument::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDocument::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVDocument::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVDocument::GetInPlace ( ) {
    short _result = 0;
    HRESULT _hr = get_InPlace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMastersPtr IVDocument::GetMasters ( ) {
    struct IVMasters * _result = 0;
    HRESULT _hr = get_Masters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMastersPtr(_result, false);
}

IVPagesPtr IVDocument::GetPages ( ) {
    struct IVPages * _result = 0;
    HRESULT _hr = get_Pages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagesPtr(_result, false);
}

IVStylesPtr IVDocument::GetStyles ( ) {
    struct IVStyles * _result = 0;
    HRESULT _hr = get_Styles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylesPtr(_result, false);
}

_bstr_t IVDocument::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVDocument::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVDocument::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVMasterPtr IVDocument::Drop ( IUnknown * ObjectToDrop, short xPos, short yPos ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

short IVDocument::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVDocument::Getold_Saved ( ) {
    short _result = 0;
    HRESULT _hr = get_old_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_Saved ( short lpi2Ret ) {
    HRESULT _hr = put_old_Saved(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::GetReadOnly ( ) {
    short _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVDocument::Save ( ) {
    short _result = 0;
    HRESULT _hr = raw_Save(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVDocument::SaveAs ( _bstr_t FileName ) {
    short _result = 0;
    HRESULT _hr = raw_SaveAs(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDocument::Getold_Version ( ) {
    long _result = 0;
    HRESULT _hr = get_old_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_Version ( long lpi4Ret ) {
    HRESULT _hr = put_old_Version(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutTitle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Title(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutSubject ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Subject(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetCreator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutCreator ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Creator(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutKeywords ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Keywords(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutDescription ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Description(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::Print ( ) {
    HRESULT _hr = raw_Print();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDocument::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVUIObjectPtr IVDocument::GetCustomMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

HRESULT IVDocument::SetCustomMenus ( struct IVUIObject * MenusObject ) {
    HRESULT _hr = raw_SetCustomMenus(MenusObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVDocument::GetCustomMenusFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomMenusFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutCustomMenusFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomMenusFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::ClearCustomMenus ( ) {
    HRESULT _hr = raw_ClearCustomMenus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVUIObjectPtr IVDocument::GetCustomToolbars ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

HRESULT IVDocument::SetCustomToolbars ( struct IVUIObject * ToolbarsObject ) {
    HRESULT _hr = raw_SetCustomToolbars(ToolbarsObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVDocument::GetCustomToolbarsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomToolbarsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutCustomToolbarsFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomToolbarsFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::ClearCustomToolbars ( ) {
    HRESULT _hr = raw_ClearCustomToolbars();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVFontsPtr IVDocument::GetFonts ( ) {
    struct IVFonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVFontsPtr(_result, false);
}

IVColorsPtr IVDocument::GetColors ( ) {
    struct IVColors * _result = 0;
    HRESULT _hr = get_Colors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVColorsPtr(_result, false);
}

IVEventListPtr IVDocument::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

_bstr_t IVDocument::GetTemplate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Template(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVDocument::SaveAsEx ( _bstr_t FileName, short SaveFlags ) {
    HRESULT _hr = raw_SaveAsEx(FileName, SaveFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVDocument::Getold_SavePreviewMode ( ) {
    short _result = 0;
    HRESULT _hr = get_old_SavePreviewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_SavePreviewMode ( short lpi2Ret ) {
    HRESULT _hr = put_old_SavePreviewMode(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::GetIcon ( short ID, _bstr_t FileName ) {
    HRESULT _hr = raw_GetIcon(ID, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDocument::SetIcon ( short ID, short Index, _bstr_t FileName ) {
    HRESULT _hr = raw_SetIcon(ID, Index, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double IVDocument::GetLeftMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_LeftMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutLeftMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_LeftMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVDocument::GetRightMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_RightMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutRightMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_RightMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVDocument::GetTopMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_TopMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutTopMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_TopMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVDocument::GetBottomMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_BottomMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutBottomMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_BottomMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::Getold_PrintLandscape ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintLandscape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_PrintLandscape ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintLandscape(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::Getold_PrintCenteredH ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintCenteredH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_PrintCenteredH ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintCenteredH(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::Getold_PrintCenteredV ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintCenteredV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_PrintCenteredV ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintCenteredV(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVDocument::GetPrintScale ( ) {
    double _result = 0;
    HRESULT _hr = get_PrintScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintScale ( double lpr8Ret ) {
    HRESULT _hr = put_PrintScale(lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::Getold_PrintFitOnPages ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintFitOnPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_PrintFitOnPages ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintFitOnPages(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::GetPrintPagesAcross ( ) {
    short _result = 0;
    HRESULT _hr = get_PrintPagesAcross(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintPagesAcross ( short lpi2Ret ) {
    HRESULT _hr = put_PrintPagesAcross(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::GetPrintPagesDown ( ) {
    short _result = 0;
    HRESULT _hr = get_PrintPagesDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintPagesDown ( short lpi2Ret ) {
    HRESULT _hr = put_PrintPagesDown(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetDefaultStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutDefaultStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetDefaultLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutDefaultLineStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultLineStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetDefaultFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultFillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutDefaultFillStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultFillStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetDefaultTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutDefaultTextStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultTextStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVDocument::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVDocument::OpenStencilWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenStencilWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

HRESULT IVDocument::ParseLine ( _bstr_t Line ) {
    HRESULT _hr = raw_ParseLine(Line);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDocument::ExecuteLine ( _bstr_t Line ) {
    HRESULT _hr = raw_ExecuteLine(Line);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IVDocument::GetVBProject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

double IVDocument::GetPaperWidth ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_PaperWidth(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVDocument::GetPaperHeight ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_PaperHeight(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVDocument::Getold_PaperSize ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_PaperSize ( short lpi2Ret ) {
    HRESULT _hr = put_old_PaperSize(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::FollowHyperlink45 ( _bstr_t Target, _bstr_t Location ) {
    HRESULT _hr = raw_FollowHyperlink45(Target, Location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVDocument::GetCodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVDocument::Getold_Mode ( ) {
    short _result = 0;
    HRESULT _hr = get_old_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::Putold_Mode ( short lpi2Ret ) {
    HRESULT _hr = put_old_Mode(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVOLEObjectsPtr IVDocument::GetOLEObjects ( ) {
    struct IVOLEObjects * _result = 0;
    HRESULT _hr = get_OLEObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectsPtr(_result, false);
}

HRESULT IVDocument::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, const _variant_t & ExtraInfo, const _variant_t & Frame, const _variant_t & NewWindow, const _variant_t & res1, const _variant_t & res2, const _variant_t & res3 ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, ExtraInfo, Frame, NewWindow, res1, res2, res3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVDocument::GetManager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Manager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutManager ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Manager(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Company(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutCompany ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Company(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutCategory ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Category(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetHyperlinkBase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HyperlinkBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutHyperlinkBase ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_HyperlinkBase(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVShapePtr IVDocument::GetDocumentSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_DocumentSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IDispatchPtr IVDocument::GetContainer ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IVDocument::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVDocument::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVMasterShortcutsPtr IVDocument::GetMasterShortcuts ( ) {
    struct IVMasterShortcuts * _result = 0;
    HRESULT _hr = get_MasterShortcuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutsPtr(_result, false);
}

_bstr_t IVDocument::GetAlternateNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternateNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutAlternateNames ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_AlternateNames(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVShapePtr IVDocument::GetGestureFormatSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_GestureFormatSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVDocument::ClearGestureFormatSheet ( ) {
    HRESULT _hr = raw_ClearGestureFormatSheet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVDocument::GetAutoRecover ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRecover(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutAutoRecover ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_AutoRecover(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutSaved ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_Saved(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisDocVersions IVDocument::GetVersion ( ) {
    enum VisDocVersions _result;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutVersion ( enum VisDocVersions lpi4Ret ) {
    HRESULT _hr = put_Version(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisSavePreviewMode IVDocument::GetSavePreviewMode ( ) {
    enum VisSavePreviewMode _result;
    HRESULT _hr = get_SavePreviewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutSavePreviewMode ( enum VisSavePreviewMode lpi4Ret ) {
    HRESULT _hr = put_SavePreviewMode(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetPrintLandscape ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintLandscape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintLandscape ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintLandscape(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetPrintCenteredH ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintCenteredH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintCenteredH ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintCenteredH(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetPrintCenteredV ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintCenteredV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintCenteredV ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintCenteredV(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetPrintFitOnPages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintFitOnPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintFitOnPages ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintFitOnPages(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisPaperSizes IVDocument::GetPaperSize ( ) {
    enum VisPaperSizes _result;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPaperSize ( enum VisPaperSizes lpi4Ret ) {
    HRESULT _hr = put_PaperSize(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisDocModeArgs IVDocument::GetMode ( ) {
    enum VisDocModeArgs _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutMode ( enum VisDocModeArgs lpi4Ret ) {
    HRESULT _hr = put_Mode(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetSnapEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SnapEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutSnapEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_SnapEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisSnapSettings IVDocument::GetSnapSettings ( ) {
    enum VisSnapSettings _result;
    HRESULT _hr = get_SnapSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutSnapSettings ( enum VisSnapSettings pnRet ) {
    HRESULT _hr = put_SnapSettings(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisSnapExtensions IVDocument::GetSnapExtensions ( ) {
    enum VisSnapExtensions _result;
    HRESULT _hr = get_SnapExtensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutSnapExtensions ( enum VisSnapExtensions pnRet ) {
    HRESULT _hr = put_SnapExtensions(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IVDocument::GetSnapAngles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SnapAngles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutSnapAngles ( SAFEARRAY * * dAngles ) {
    HRESULT _hr = put_SnapAngles(dAngles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetGlueEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GlueEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutGlueEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_GlueEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisGlueSettings IVDocument::GetGlueSettings ( ) {
    enum VisGlueSettings _result;
    HRESULT _hr = get_GlueSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutGlueSettings ( enum VisGlueSettings pnRet ) {
    HRESULT _hr = put_GlueSettings(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetDynamicGridEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DynamicGridEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutDynamicGridEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_DynamicGridEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetDefaultGuideStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultGuideStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutDefaultGuideStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultGuideStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisProtection IVDocument::GetProtection ( const _variant_t & bstrPassword ) {
    enum VisProtection _result;
    HRESULT _hr = get_Protection(bstrPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutProtection ( const _variant_t & bstrPassword, enum VisProtection pnRet ) {
    HRESULT _hr = put_Protection(bstrPassword, pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetPrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Printer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutPrinter ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_Printer(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVDocument::GetPrintCopies ( ) {
    long _result = 0;
    HRESULT _hr = get_PrintCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutPrintCopies ( long pnRet ) {
    HRESULT _hr = put_PrintCopies(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetHeaderLeft ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HeaderLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutHeaderLeft ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_HeaderLeft(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetHeaderCenter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HeaderCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutHeaderCenter ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_HeaderCenter(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetHeaderRight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HeaderRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutHeaderRight ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_HeaderRight(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVDocument::GetHeaderMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_HeaderMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutHeaderMargin ( const _variant_t & UnitsNameOrCode, double pdRet ) {
    HRESULT _hr = put_HeaderMargin(UnitsNameOrCode, pdRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetFooterLeft ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FooterLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutFooterLeft ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_FooterLeft(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetFooterCenter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FooterCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutFooterCenter ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_FooterCenter(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetFooterRight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FooterRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutFooterRight ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_FooterRight(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVDocument::GetFooterMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_FooterMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutFooterMargin ( const _variant_t & UnitsNameOrCode, double pdRet ) {
    HRESULT _hr = put_FooterMargin(UnitsNameOrCode, pdRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IFontDisp * IVDocument::GetHeaderFooterFont ( ) {
    IFontDisp * _result = 0;
    HRESULT _hr = get_HeaderFooterFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutRefHeaderFooterFont ( IFontDisp * ppFontDisp ) {
    HRESULT _hr = putref_HeaderFooterFont(ppFontDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVDocument::GetHeaderFooterColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_HeaderFooterColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutHeaderFooterColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_HeaderFooterColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVDocument::PutPassword ( const _variant_t & bstrExistingPassword, _bstr_t _arg2 ) {
    HRESULT _hr = put_Password(bstrExistingPassword, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * IVDocument::GetPreviewPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_PreviewPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutRefPreviewPicture ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_PreviewPicture(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::Clean ( const _variant_t & nTargets, const _variant_t & nActions, const _variant_t & nAlerts, const _variant_t & nFixes, const _variant_t & bStopOnError, const _variant_t & bLogFileName, const _variant_t & nReserved ) {
    HRESULT _hr = raw_Clean(nTargets, nActions, nAlerts, nFixes, bStopOnError, bLogFileName, nReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVDocument::GetBuildNumberCreated ( ) {
    long _result = 0;
    HRESULT _hr = get_BuildNumberCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDocument::GetBuildNumberEdited ( ) {
    long _result = 0;
    HRESULT _hr = get_BuildNumberEdited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IVDocument::GetTimeCreated ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IVDocument::GetTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IVDocument::GetTimeEdited ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeEdited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IVDocument::GetTimePrinted ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimePrinted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IVDocument::GetTimeSaved ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeSaved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDocument::CopyPreviewPicture ( struct IVDocument * pSourceDoc ) {
    HRESULT _hr = raw_CopyPreviewPicture(pSourceDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVDocument::GetContainsWorkspace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContainsWorkspace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVDocument::GetEmailRoutingData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EmailRoutingData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVDocument::GetVBProjectData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_VBProjectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDocument::GetSolutionXMLElementCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SolutionXMLElementCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVDocument::GetSolutionXMLElementName ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionXMLElementName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVDocument::GetSolutionXMLElementExists ( _bstr_t ElementName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SolutionXMLElementExists(ElementName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVDocument::GetSolutionXMLElement ( _bstr_t ElementName ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionXMLElement(ElementName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutSolutionXMLElement ( _bstr_t ElementName, _bstr_t pWellFormedXML ) {
    HRESULT _hr = put_SolutionXMLElement(ElementName, pWellFormedXML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::DeleteSolutionXMLElement ( _bstr_t ElementName ) {
    HRESULT _hr = raw_DeleteSolutionXMLElement(ElementName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVDocument::GetFullBuildNumberCreated ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuildNumberCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDocument::GetFullBuildNumberEdited ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuildNumberEdited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDocument::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVDocument::GetMacrosEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MacrosEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisZoomBehavior IVDocument::GetZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_ZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_ZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::CanCheckIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDocument::CheckIn ( VARIANT_BOOL SaveChanges, VARIANT * Comments, VARIANT_BOOL MakePublic ) {
    HRESULT _hr = raw_CheckIn(SaveChanges, Comments, MakePublic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum VisDocumentTypes IVDocument::GetType ( ) {
    enum VisDocumentTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDocument::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutLanguage ( long lpLangID ) {
    HRESULT _hr = put_Language(lpLangID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetRemovePersonalInformation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemovePersonalInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutRemovePersonalInformation ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_RemovePersonalInformation(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::PrintOut ( enum VisPrintOutRange PrintRange, long FromPage, long ToPage, VARIANT_BOOL ScaleCurrentViewToPaper, _bstr_t PrinterName, VARIANT_BOOL PrintToFile, _bstr_t OutputFileName, long Copies, VARIANT_BOOL Collate, VARIANT_BOOL ColorAsBlack ) {
    HRESULT _hr = raw_PrintOut(PrintRange, FromPage, ToPage, ScaleCurrentViewToPaper, PrinterName, PrintToFile, OutputFileName, Copies, Collate, ColorAsBlack);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVDocument::BeginUndoScope ( _bstr_t bstrUndoScopeName ) {
    long _result = 0;
    HRESULT _hr = raw_BeginUndoScope(bstrUndoScopeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDocument::EndUndoScope ( long nScopeID, VARIANT_BOOL bCommit ) {
    HRESULT _hr = raw_EndUndoScope(nScopeID, bCommit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDocument::AddUndoUnit ( IUnknown * pUndoUnit ) {
    HRESULT _hr = raw_AddUndoUnit(pUndoUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDocument::PurgeUndo ( ) {
    HRESULT _hr = raw_PurgeUndo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVDocument::GetUndoEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutUndoEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_UndoEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::RenameCurrentScope ( _bstr_t bstrScopeName ) {
    HRESULT _hr = raw_RenameCurrentScope(bstrScopeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IVDocument::GetSharedWorkspace ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SharedWorkspace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IVDocument::GetSync ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Sync(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT IVDocument::RemoveHiddenInformation ( long RemoveHiddenInfoItems ) {
    HRESULT _hr = raw_RemoveHiddenInformation(RemoveHiddenInfoItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVDataRecordsetsPtr IVDocument::GetDataRecordsets ( ) {
    struct IVDataRecordsets * _result = 0;
    HRESULT _hr = get_DataRecordsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetsPtr(_result, false);
}

HRESULT IVDocument::GetThemeNames ( enum VisThemeTypes eType, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetThemeNames(eType, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDocument::GetThemeNamesU ( enum VisThemeTypes eType, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetThemeNamesU(eType, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVDocument::CanUndoCheckOut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanUndoCheckOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDocument::UndoCheckOut ( ) {
    HRESULT _hr = raw_UndoCheckOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVDocument::GetContainsWorkspaceEx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContainsWorkspaceEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutContainsWorkspaceEx ( VARIANT_BOOL TrueOrFalse ) {
    HRESULT _hr = put_ContainsWorkspaceEx(TrueOrFalse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVDocument::ExportAsFixedFormat ( enum VisFixedFormatTypes FixedFormat, _bstr_t OutputFileName, enum VisDocExIntent Intent, enum VisPrintOutRange PrintRange, long FromPage, long ToPage, VARIANT_BOOL ColorAsBlack, VARIANT_BOOL IncludeBackground, VARIANT_BOOL IncludeDocumentProperties, VARIANT_BOOL IncludeStructureTags, VARIANT_BOOL UseISO19005_1, const _variant_t & FixedFormatExtClass ) {
    HRESULT _hr = raw_ExportAsFixedFormat(FixedFormat, OutputFileName, Intent, PrintRange, FromPage, ToPage, ColorAsBlack, IncludeBackground, IncludeDocumentProperties, IncludeStructureTags, UseISO19005_1, FixedFormatExtClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVDocument::GetDefaultSavePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultSavePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutDefaultSavePath ( _bstr_t SaveLocation ) {
    HRESULT _hr = put_DefaultSavePath(SaveLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetCustomUI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutCustomUI ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomUI(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDocument::GetUserCustomUI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCustomUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDocument::PutUserCustomUI ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserCustomUI(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVServerPublishOptionsPtr IVDocument::GetServerPublishOptions ( ) {
    struct IVServerPublishOptions * _result = 0;
    HRESULT _hr = get_ServerPublishOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVServerPublishOptionsPtr(_result, false);
}

IVValidationPtr IVDocument::GetValidation ( ) {
    struct IVValidation * _result = 0;
    HRESULT _hr = get_Validation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationPtr(_result, false);
}

long IVDocument::GetDiagramServicesEnabled ( ) {
    long _result = 0;
    HRESULT _hr = get_DiagramServicesEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDocument::PutDiagramServicesEnabled ( long pDiagramServices ) {
    HRESULT _hr = put_DiagramServicesEnabled(pDiagramServices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDocument::GetCompatibilityMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CompatibilityMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCommentsPtr IVDocument::GetComments ( ) {
    struct IVComments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCommentsPtr(_result, false);
}

long IVDocument::GetEditorCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EditorCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVDataConnection wrapper method implementations
//

IVApplicationPtr IVDataConnection::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDataConnection::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVDataConnection::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVDataConnection::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDataConnection::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVDataConnection::GetConnectionString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDataConnection::PutConnectionString ( _bstr_t ConnectionString ) {
    HRESULT _hr = put_ConnectionString(ConnectionString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDataConnection::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVDataConnection::GetTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_Timeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDataConnection::PutTimeout ( long Timeout ) {
    HRESULT _hr = put_Timeout(Timeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVComment wrapper method implementations
//

IVApplicationPtr IVComment::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVComment::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVComment::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVComment::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVComment::GetAssociatedObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_AssociatedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

DATE IVComment::GetCreateDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreateDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IVComment::GetEditDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EditDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVComment::GetCollapsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Collapsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVComment::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVComment::GetAuthorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVComment::GetAuthorSipAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthorSipAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVComment::GetAuthorSMTPAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthorSMTPAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVComment::GetAuthorInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthorInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVComment::PutCollapsed ( VARIANT_BOOL pCollapsed ) {
    HRESULT _hr = put_Collapsed(pCollapsed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVComment::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVComment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVComments wrapper method implementations
//

IVApplicationPtr IVComments::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVComments::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVComments::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVComments::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVComments::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCommentPtr IVComments::GetItem ( long Index ) {
    struct IVComment * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCommentPtr(_result, false);
}

IUnknownPtr IVComments::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVCommentPtr IVComments::Add ( _bstr_t Text ) {
    struct IVComment * _result = 0;
    HRESULT _hr = raw_Add(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCommentPtr(_result, false);
}

HRESULT IVComments::DeleteAll ( ) {
    HRESULT _hr = raw_DeleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVFont wrapper method implementations
//

IVApplicationPtr IVFont::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVFont::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVFont::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVFont::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVFont::GetAttributes ( ) {
    short _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVFont::GetCharSet ( ) {
    short _result = 0;
    HRESULT _hr = get_CharSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVFont::GetPitchAndFamily ( ) {
    short _result = 0;
    HRESULT _hr = get_PitchAndFamily(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVFont::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVFont::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVFont::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVFonts wrapper method implementations
//

IVApplicationPtr IVFonts::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVFonts::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVFonts::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVFontPtr IVFonts::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVFont * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVFontPtr(_result, false);
}

IVFontPtr IVFonts::GetItemFromID ( long ObjectID ) {
    struct IVFont * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVFontPtr(_result, false);
}

short IVFonts::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVFonts::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVFonts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVColor wrapper method implementations
//

IVApplicationPtr IVColor::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVColor::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVColor::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVColor::GetRed ( ) {
    short _result = 0;
    HRESULT _hr = get_Red(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVColor::PutRed ( short lpi2Ret ) {
    HRESULT _hr = put_Red(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVColor::GetGreen ( ) {
    short _result = 0;
    HRESULT _hr = get_Green(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVColor::PutGreen ( short lpi2Ret ) {
    HRESULT _hr = put_Green(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVColor::GetBlue ( ) {
    short _result = 0;
    HRESULT _hr = get_Blue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVColor::PutBlue ( short lpi2Ret ) {
    HRESULT _hr = put_Blue(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVColor::GetFlags ( ) {
    short _result = 0;
    HRESULT _hr = get_Flags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVColor::PutFlags ( short lpi2Ret ) {
    HRESULT _hr = put_Flags(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVColor::GetPaletteEntry ( ) {
    long _result = 0;
    HRESULT _hr = get_PaletteEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVColor::PutPaletteEntry ( long lpi4Ret ) {
    HRESULT _hr = put_PaletteEntry(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVColor::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVColor::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVColor::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVColors wrapper method implementations
//

IVApplicationPtr IVColors::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVColors::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVColors::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVColorPtr IVColors::GetItem16 ( short Index ) {
    struct IVColor * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVColorPtr(_result, false);
}

short IVColors::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVColors::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVColorPtr IVColors::GetItem ( long Index ) {
    struct IVColor * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVColorPtr(_result, false);
}

long IVColors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVColors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVServerPublishOptions wrapper method implementations
//

IVApplicationPtr IVServerPublishOptions::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVServerPublishOptions::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVServerPublishOptions::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVServerPublishOptions::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVServerPublishOptions::GetIsPublishedPage ( _bstr_t PageName, enum VisLangFlags Flags ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPublishedPage(PageName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVServerPublishOptions::IncludePage ( _bstr_t PageName, enum VisLangFlags Flags ) {
    HRESULT _hr = raw_IncludePage(PageName, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVServerPublishOptions::ExcludePage ( _bstr_t PageName, enum VisLangFlags Flags ) {
    HRESULT _hr = raw_ExcludePage(PageName, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVServerPublishOptions::SetPagesToPublish ( enum VisPublishPages PublishPages, SAFEARRAY * * NamesArray, enum VisLangFlags Flags ) {
    HRESULT _hr = raw_SetPagesToPublish(PublishPages, NamesArray, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVServerPublishOptions::GetPagesToPublish ( enum VisLangFlags Flags, enum VisPublishPages * PublishPages, SAFEARRAY * * NamesArray ) {
    HRESULT _hr = raw_GetPagesToPublish(Flags, PublishPages, NamesArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVServerPublishOptions::SetRecordsetsToPublish ( enum VisPublishDataRecordsets PublishDataRecordsets, SAFEARRAY * * DataRecordsetIDs ) {
    HRESULT _hr = raw_SetRecordsetsToPublish(PublishDataRecordsets, DataRecordsetIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVServerPublishOptions::GetRecordsetsToPublish ( enum VisPublishDataRecordsets * PublishDataRecordsets, SAFEARRAY * * DataRecordsetIDs ) {
    HRESULT _hr = raw_GetRecordsetsToPublish(PublishDataRecordsets, DataRecordsetIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVCoauthMergeEvent wrapper method implementations
//

IVApplicationPtr IVCoauthMergeEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVCoauthMergeEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVCoauthMergeEvent::GetBaseDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_BaseDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVDocumentPtr IVCoauthMergeEvent::GetDownloadDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_DownloadDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVDocumentPtr IVCoauthMergeEvent::GetWorkingDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_WorkingDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVCoauthMergeEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVMasters wrapper method implementations
//

IVApplicationPtr IVMasters::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVMasters::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMasterPtr IVMasters::GetItem ( const _variant_t & NameUIDOrIndex ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Item(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

short IVMasters::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVMasters::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVMasters::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVMasters::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVMasters::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMasterPtr IVMasters::Add ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

HRESULT IVMasters::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVMasterPtr IVMasters::Drop ( IUnknown * ObjectToDrop, short xPos, short yPos ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IVMasterPtr IVMasters::GetItemU ( const _variant_t & NameUIDOrIndex ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ItemU(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

HRESULT IVMasters::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IVMasters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVMasterPtr IVMasters::GetItemFromID ( long nID ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

HRESULT IVMasters::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVMasterPtr IVMasters::AddEx ( enum VisMasterTypes Type ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_AddEx(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

//
// interface IVMaster wrapper method implementations
//

IVDocumentPtr IVMaster::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

_bstr_t IVMaster::GetPrompt ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMaster::PutPrompt ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Prompt(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMaster::GetAlignName ( ) {
    short _result = 0;
    HRESULT _hr = get_AlignName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutAlignName ( short lpi2Ret ) {
    HRESULT _hr = put_AlignName(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMaster::GetIconSize ( ) {
    short _result = 0;
    HRESULT _hr = get_IconSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutIconSize ( short lpi2Ret ) {
    HRESULT _hr = put_IconSize(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMaster::GetIconUpdate ( ) {
    short _result = 0;
    HRESULT _hr = get_IconUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutIconUpdate ( short lpi2Ret ) {
    HRESULT _hr = put_IconUpdate(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVApplicationPtr IVMaster::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVMaster::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMaster::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVMaster::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMaster::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVShapesPtr IVMaster::GetShapes ( ) {
    struct IVShapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapesPtr(_result, false);
}

short IVMaster::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMaster::GetOneD ( ) {
    short _result = 0;
    HRESULT _hr = get_OneD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVMaster::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVMaster::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVLayersPtr IVMaster::GetLayers ( ) {
    struct IVLayers * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayersPtr(_result, false);
}

IVShapePtr IVMaster::GetPageSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_PageSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::Drop ( IUnknown * ObjectToDrop, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVMaster::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVEventListPtr IVMaster::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVMaster::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVMaster::DrawLine ( double xBegin, double yBegin, double xEnd, double yEnd ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawLine(xBegin, yBegin, xEnd, yEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawRectangle ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRectangle(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawOval ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawOval(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawSpline ( SAFEARRAY * * xyArray, double Tolerance, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawSpline(xyArray, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawBezier ( SAFEARRAY * * xyArray, short degree, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawBezier(xyArray, degree, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawPolyline ( SAFEARRAY * * xyArray, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawPolyline(xyArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::Import ( _bstr_t FileName ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Import(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVMaster::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVMaster::InsertFromFile ( _bstr_t FileName, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::InsertObject ( _bstr_t ClassOrProgID, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertObject(ClassOrProgID, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVWindowPtr IVMaster::OpenDrawWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenDrawWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVWindowPtr IVMaster::OpenIconWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenIconWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVMasterPtr IVMaster::Open ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

HRESULT IVMaster::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVMaster::DropMany ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropMany(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVMaster::GetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::GetResults ( SAFEARRAY * * SID_SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SID_SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVMaster::SetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SID_SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMaster::SetResults ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SID_SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVConnectsPtr IVMaster::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

HRESULT IVMaster::ImportIcon ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportIcon(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::ExportIconTransparentAsBlack ( _bstr_t FileName, short Flags ) {
    HRESULT _hr = raw_ExportIconTransparentAsBlack(FileName, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVMaster::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVOLEObjectsPtr IVMaster::GetOLEObjects ( ) {
    struct IVOLEObjects * _result = 0;
    HRESULT _hr = get_OLEObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectsPtr(_result, false);
}

short IVMaster::GetPatternFlags ( ) {
    short _result = 0;
    HRESULT _hr = get_PatternFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutPatternFlags ( short lpi2Ret ) {
    HRESULT _hr = put_PatternFlags(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMaster::GetMatchByName ( ) {
    short _result = 0;
    HRESULT _hr = get_MatchByName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutMatchByName ( short lpi2Ret ) {
    HRESULT _hr = put_MatchByName(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVMaster::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMaster::GetHidden ( ) {
    short _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutHidden ( short lpi2Ret ) {
    HRESULT _hr = put_Hidden(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMaster::GetBaseID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVMaster::GetNewBaseID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NewBaseID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVSelectionPtr IVMaster::GetSpatialSearch ( double x, double y, short Relation, double Tolerance, short Flags ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialSearch(x, y, Relation, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

IVMasterShortcutPtr IVMaster::CreateShortcut ( ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = raw_CreateShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

_bstr_t IVMaster::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMaster::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMaster::DropManyU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropManyU(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVMaster::GetFormulasU ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVMaster::DrawNURBS ( short degree, short Flags, SAFEARRAY * * xyArray, SAFEARRAY * * knots, const _variant_t & weights ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawNURBS(degree, Flags, xyArray, knots, weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVMaster::ExportIcon ( _bstr_t FileName, short Flags, const _variant_t & TransparentRGB ) {
    HRESULT _hr = raw_ExportIcon(FileName, Flags, TransparentRGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVMaster::GetIndexInStencil ( ) {
    short _result = 0;
    HRESULT _hr = get_IndexInStencil(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IPictureDisp * IVMaster::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IPictureDisp * IVMaster::GetIcon ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutRefIcon ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_Icon(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVMasterPtr IVMaster::GetEditCopy ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_EditCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IVMasterPtr IVMaster::GetOriginal ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Original(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

VARIANT_BOOL IVMaster::GetIsChanged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutIndexInStencil ( short lpi2Ret ) {
    HRESULT _hr = put_IndexInStencil(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVMaster::ResizeToFitContents ( ) {
    HRESULT _hr = raw_ResizeToFitContents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::PasteSpecial ( long Format, const _variant_t & Link, const _variant_t & DisplayAsIcon ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVSelectionPtr IVMaster::CreateSelection ( enum VisSelectionTypes SelType, enum VisSelectMode IterationMode, const _variant_t & Data ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_CreateSelection(SelType, IterationMode, Data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

IVShapePtr IVMaster::AddGuide ( short Type, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_AddGuide(Type, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawArcByThreePoints ( double xBegin, double yBegin, double xEnd, double yEnd, double xControl, double yControl ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawArcByThreePoints(xBegin, yBegin, xEnd, yEnd, xControl, yControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawQuarterArc ( double xBegin, double yBegin, double xEnd, double yEnd, enum VisArcSweepFlags SweepFlag ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawQuarterArc(xBegin, yBegin, xEnd, yEnd, SweepFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVMaster::DrawCircularArc ( double xCenter, double yCenter, double Radius, double StartAngle, double EndAngle ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawCircularArc(xCenter, yCenter, Radius, StartAngle, EndAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

enum VisMasterTypes IVMaster::GetType ( ) {
    enum VisMasterTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVMaster::GetDataGraphicHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataGraphicHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutDataGraphicHidden ( VARIANT_BOOL Hidden ) {
    HRESULT _hr = put_DataGraphicHidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMaster::GetDataGraphicHidesText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataGraphicHidesText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutDataGraphicHidesText ( VARIANT_BOOL HideText ) {
    HRESULT _hr = put_DataGraphicHidesText(HideText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMaster::GetDataGraphicShowBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataGraphicShowBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutDataGraphicShowBorder ( VARIANT_BOOL ShowBorder ) {
    HRESULT _hr = put_DataGraphicShowBorder(ShowBorder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisGraphicPositionHorizontal IVMaster::GetDataGraphicHorizontalPosition ( ) {
    enum VisGraphicPositionHorizontal _result;
    HRESULT _hr = get_DataGraphicHorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutDataGraphicHorizontalPosition ( enum VisGraphicPositionHorizontal Position ) {
    HRESULT _hr = put_DataGraphicHorizontalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisGraphicPositionVertical IVMaster::GetDataGraphicVerticalPosition ( ) {
    enum VisGraphicPositionVertical _result;
    HRESULT _hr = get_DataGraphicVerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMaster::PutDataGraphicVerticalPosition ( enum VisGraphicPositionVertical Position ) {
    HRESULT _hr = put_DataGraphicVerticalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVGraphicItemsPtr IVMaster::GetGraphicItems ( ) {
    struct IVGraphicItems * _result = 0;
    HRESULT _hr = get_GraphicItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemsPtr(_result, false);
}

HRESULT IVMaster::DataGraphicDelete ( ) {
    HRESULT _hr = raw_DataGraphicDelete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::PasteToLocation ( double xPos, double yPos, long Flags ) {
    HRESULT _hr = raw_PasteToLocation(xPos, yPos, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMaster::VisualBoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_VisualBoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVGraphicItem wrapper method implementations
//

IVApplicationPtr IVGraphicItem::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVGraphicItem::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

enum VisObjectTypes IVGraphicItem::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVGraphicItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVGraphicItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVGraphicItem::PutIndex ( long Index ) {
    HRESULT _hr = put_Index(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVGraphicItem::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVGraphicItem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum VisGraphicItemTypes IVGraphicItem::GetType ( ) {
    enum VisGraphicItemTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVGraphicItem::GetExpression ( enum VisGraphicField * Field, BSTR * Expression ) {
    HRESULT _hr = raw_GetExpression(Field, Expression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVGraphicItem::SetExpression ( enum VisGraphicField Field, _bstr_t Expression ) {
    HRESULT _hr = raw_SetExpression(Field, Expression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVMasterPtr IVGraphicItem::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

short IVGraphicItem::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVGraphicItem::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVGraphicItem::PutTag ( _bstr_t Tag ) {
    HRESULT _hr = put_Tag(Tag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisGraphicPositionHorizontal IVGraphicItem::GetHorizontalPosition ( ) {
    enum VisGraphicPositionHorizontal _result;
    HRESULT _hr = get_HorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVGraphicItem::PutHorizontalPosition ( enum VisGraphicPositionHorizontal Position ) {
    HRESULT _hr = put_HorizontalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisGraphicPositionVertical IVGraphicItem::GetVerticalPosition ( ) {
    enum VisGraphicPositionVertical _result;
    HRESULT _hr = get_VerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVGraphicItem::PutVerticalPosition ( enum VisGraphicPositionVertical Position ) {
    HRESULT _hr = put_VerticalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVGraphicItem::GetUseDataGraphicPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDataGraphicPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVGraphicItem::PutUseDataGraphicPosition ( VARIANT_BOOL UseDataGraphicPosition ) {
    HRESULT _hr = put_UseDataGraphicPosition(UseDataGraphicPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVGraphicItems wrapper method implementations
//

IVApplicationPtr IVGraphicItems::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVGraphicItems::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

enum VisObjectTypes IVGraphicItems::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMasterPtr IVGraphicItems::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IUnknownPtr IVGraphicItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

long IVGraphicItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVGraphicItemPtr IVGraphicItems::AddCopy ( struct IVGraphicItem * GraphicItem ) {
    struct IVGraphicItem * _result = 0;
    HRESULT _hr = raw_AddCopy(GraphicItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemPtr(_result, false);
}

IVGraphicItemPtr IVGraphicItems::GetItem ( long Index ) {
    struct IVGraphicItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemPtr(_result, false);
}

IVGraphicItemPtr IVGraphicItems::GetItemFromID ( long ObjectID ) {
    struct IVGraphicItem * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemPtr(_result, false);
}

short IVGraphicItems::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVShapes wrapper method implementations
//

IVApplicationPtr IVShapes::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVShapes::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShapes::GetItem ( const _variant_t & NameUIDOrIndex ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Item(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVShapes::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVShapes::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVShapes::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVMasterPtr IVShapes::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IVShapePtr IVShapes::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVShapes::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVShapes::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVShapes::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVShapes::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShapes::GetItemFromID16 ( short ObjectID ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ItemFromID16(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

long IVShapes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShapes::GetItemFromID ( long ObjectID ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShapes::GetItemU ( const _variant_t & NameUIDOrIndex ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ItemU(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IUnknownPtr IVShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVShapePtr IVShapes::GetItemFromUniqueID ( _bstr_t UniqueID ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ItemFromUniqueID(UniqueID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

//
// interface IVShape wrapper method implementations
//

HRESULT IVShape::VoidGroup ( ) {
    HRESULT _hr = raw_VoidGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::BringForward ( ) {
    HRESULT _hr = raw_BringForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::ConvertToGroup ( ) {
    HRESULT _hr = raw_ConvertToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::FlipHorizontal ( ) {
    HRESULT _hr = raw_FlipHorizontal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::FlipVertical ( ) {
    HRESULT _hr = raw_FlipVertical();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::ReverseEnds ( ) {
    HRESULT _hr = raw_ReverseEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::SendBackward ( ) {
    HRESULT _hr = raw_SendBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::Rotate90 ( ) {
    HRESULT _hr = raw_Rotate90();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::Ungroup ( ) {
    HRESULT _hr = raw_Ungroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVDocumentPtr IVShape::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IDispatchPtr IVShape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IVApplicationPtr IVShape::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVShape::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMasterPtr IVShape::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

short IVShape::GetType ( ) {
    short _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCellPtr IVShape::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cells(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

IVCellPtr IVShape::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsSRC(Section, Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

IVShapesPtr IVShape::GetShapes ( ) {
    struct IVShapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapesPtr(_result, false);
}

_bstr_t IVShape::GetData1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutData1 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data1(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetData2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutData2 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data2(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetData3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutData3 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data3(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Help(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutHelp ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Help(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetNameID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVShape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutText ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Text(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVShape::GetCharCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CharCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCharactersPtr IVShape::GetCharacters ( ) {
    struct IVCharacters * _result = 0;
    HRESULT _hr = get_Characters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCharactersPtr(_result, false);
}

HRESULT IVShape::old_Copy ( ) {
    HRESULT _hr = raw_old_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::old_Cut ( ) {
    HRESULT _hr = raw_old_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::VoidDuplicate ( ) {
    HRESULT _hr = raw_VoidDuplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVShape::Drop ( IUnknown * ObjectToDrop, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVShape::GetOneD ( ) {
    short _result = 0;
    HRESULT _hr = get_OneD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVShape::PutOneD ( short lpi2Ret ) {
    HRESULT _hr = put_OneD(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVShape::GetGeometryCount ( ) {
    short _result = 0;
    HRESULT _hr = get_GeometryCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetRowCount ( short Section ) {
    short _result = 0;
    HRESULT _hr = get_RowCount(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::AddSection ( short Section ) {
    short _result = 0;
    HRESULT _hr = raw_AddSection(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::DeleteSection ( short Section ) {
    HRESULT _hr = raw_DeleteSection(Section);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVShape::AddRow ( short Section, short Row, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddRow(Section, Row, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::DeleteRow ( short Section, short Row ) {
    HRESULT _hr = raw_DeleteRow(Section, Row);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVShape::GetRowsCellCount ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowsCellCount(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetRowType ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowType(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVShape::PutRowType ( short Section, short Row, short lpi2Ret ) {
    HRESULT _hr = put_RowType(Section, Row, lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVShape::SetCenter ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetCenter(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::SetBegin ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetBegin(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::SetEnd ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetEnd(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVConnectsPtr IVShape::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

short IVShape::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVShape::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_Style(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVShape::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutLineStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_LineStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVShape::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LineStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutFillStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_FillStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVShape::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FillStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVShape::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutTextStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_TextStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVShape::PutTextStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_TextStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVShape::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double IVShape::Getold_AreaIU ( ) {
    double _result = 0;
    HRESULT _hr = get_old_AreaIU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVShape::Getold_LengthIU ( ) {
    double _result = 0;
    HRESULT _hr = get_old_LengthIU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVShape::GetGeomExIf ( short fFill, double LineRes ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_GeomExIf(fFill, LineRes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

_bstr_t IVShape::GetUniqueID ( short fUniqueID ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(fUniqueID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVPagePtr IVShape::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVMasterPtr IVShape::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IVShapePtr IVShape::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVShape::GetSectionExists ( short Section, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_SectionExists(Section, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetRowExists ( short Section, short Row, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_RowExists(Section, Row, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExists(localeSpecificCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellsSRCExists(Section, Row, Column, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetLayerCount ( ) {
    short _result = 0;
    HRESULT _hr = get_LayerCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVLayerPtr IVShape::GetLayer ( short Index ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_Layer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

short IVShape::AddNamedRow ( short Section, _bstr_t RowName, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddNamedRow(Section, RowName, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::AddRows ( short Section, short Row, short RowTag, short RowCount ) {
    short _result = 0;
    HRESULT _hr = raw_AddRows(Section, Row, RowTag, RowCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVShape::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVShape::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShape::DrawLine ( double xBegin, double yBegin, double xEnd, double yEnd ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawLine(xBegin, yBegin, xEnd, yEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::DrawRectangle ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRectangle(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::DrawOval ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawOval(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::DrawSpline ( SAFEARRAY * * xyArray, double Tolerance, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawSpline(xyArray, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::DrawBezier ( SAFEARRAY * * xyArray, short degree, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawBezier(xyArray, degree, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::DrawPolyline ( SAFEARRAY * * xyArray, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawPolyline(xyArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVShape::FitCurve ( double Tolerance, short Flags ) {
    HRESULT _hr = raw_FitCurve(Tolerance, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVShape::Import ( _bstr_t FileName ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Import(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVShape::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVShape::InsertFromFile ( _bstr_t FileName, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::InsertObject ( _bstr_t ClassOrProgID, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertObject(ClassOrProgID, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

_bstr_t IVShape::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVShape::GetForeignType ( ) {
    short _result = 0;
    HRESULT _hr = get_ForeignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVShape::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IVWindowPtr IVShape::OpenDrawWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenDrawWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVWindowPtr IVShape::OpenSheetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenSheetWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

short IVShape::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::DropMany ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropMany(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVShape::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVConnectsPtr IVShape::GetFromConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_FromConnects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

HRESULT IVShape::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVShape::HitTest ( double xPos, double yPos, double Tolerance ) {
    short _result = 0;
    HRESULT _hr = raw_HitTest(xPos, yPos, Tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVHyperlinkPtr IVShape::GetHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

_bstr_t IVShape::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVShape::GetObjectIsInherited ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectIsInherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPathsPtr IVShape::GetPaths ( ) {
    struct IVPaths * _result = 0;
    HRESULT _hr = get_Paths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathsPtr(_result, false);
}

IVPathsPtr IVShape::GetPathsLocal ( ) {
    struct IVPaths * _result = 0;
    HRESULT _hr = get_PathsLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathsPtr(_result, false);
}

IVHyperlinkPtr IVShape::AddHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = raw_AddHyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

long IVShape::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVShape::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVSectionPtr IVShape::GetSection ( short Index ) {
    struct IVSection * _result = 0;
    HRESULT _hr = get_Section(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSectionPtr(_result, false);
}

IVHyperlinksPtr IVShape::GetHyperlinks ( ) {
    struct IVHyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinksPtr(_result, false);
}

short IVShape::GetSpatialRelation ( struct IVShape * OtherShape, double Tolerance, short Flags ) {
    short _result = 0;
    HRESULT _hr = get_SpatialRelation(OtherShape, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVShape::GetDistanceFrom ( struct IVShape * OtherShape, short Flags ) {
    double _result = 0;
    HRESULT _hr = get_DistanceFrom(OtherShape, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVShape::GetDistanceFromPoint ( double x, double y, short Flags, VARIANT * pvPathIndex, VARIANT * pvCurveIndex, VARIANT * pvt ) {
    double _result = 0;
    HRESULT _hr = get_DistanceFromPoint(x, y, Flags, pvPathIndex, pvCurveIndex, pvt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVSelectionPtr IVShape::GetSpatialNeighbors ( short Relation, double Tolerance, short Flags, const _variant_t & ResultRoot ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialNeighbors(Relation, Tolerance, Flags, ResultRoot, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

IVSelectionPtr IVShape::GetSpatialSearch ( double x, double y, short Relation, double Tolerance, short Flags ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialSearch(x, y, Relation, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

HRESULT IVShape::TransformXYTo ( struct IVShape * OtherShape, double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_TransformXYTo(OtherShape, x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::TransformXYFrom ( struct IVShape * OtherShape, double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_TransformXYFrom(OtherShape, x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::XYToPage ( double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_XYToPage(x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::XYFromPage ( double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_XYFromPage(x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::UpdateAlignmentBox ( ) {
    HRESULT _hr = raw_UpdateAlignmentBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVCellPtr IVShape::GetCellsU ( _bstr_t localeIndependentCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsU(localeIndependentCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

_bstr_t IVShape::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVShape::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVShape::GetCellExistsU ( _bstr_t localeIndependentCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExistsU(localeIndependentCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::DropManyU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropManyU(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::GetFormulasU ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVShape::DrawNURBS ( short degree, short Flags, SAFEARRAY * * xyArray, SAFEARRAY * * knots, const _variant_t & weights ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawNURBS(degree, Flags, xyArray, knots, weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVShape::GetCellsRowIndex ( _bstr_t localeSpecificCellName ) {
    short _result = 0;
    HRESULT _hr = get_CellsRowIndex(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVShape::GetCellsRowIndexU ( _bstr_t localeIndependentCellName ) {
    short _result = 0;
    HRESULT _hr = get_CellsRowIndexU(localeIndependentCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVShape::GetIsOpenForTextEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpenForTextEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShape::GetRootShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_RootShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::GetMasterShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_MasterShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IPictureDisp * IVShape::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShape::Group ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::Duplicate ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVShape::SwapEnds ( ) {
    HRESULT _hr = raw_SwapEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

void IVShape::PutParent ( IDispatch * lpdispRet ) {
    HRESULT _hr = put_Parent(lpdispRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IVShape::GetForeignData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ForeignData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::Copy ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Copy(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::Cut ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Cut(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::PasteSpecial ( long Format, const _variant_t & Link, const _variant_t & DisplayAsIcon ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVSelectionPtr IVShape::CreateSelection ( enum VisSelectionTypes SelType, enum VisSelectMode IterationMode, const _variant_t & Data ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_CreateSelection(SelType, IterationMode, Data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

long IVShape::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVShape::PutLanguage ( long lpLangID ) {
    HRESULT _hr = put_Language(lpLangID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVShape::Offset ( double Distance ) {
    HRESULT _hr = raw_Offset(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVShape::AddGuide ( short Type, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_AddGuide(Type, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

double IVShape::GetAreaIU ( VARIANT_BOOL fIncludeSubShapes ) {
    double _result = 0;
    HRESULT _hr = get_AreaIU(fIncludeSubShapes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVShape::GetLengthIU ( VARIANT_BOOL fIncludeSubShapes ) {
    double _result = 0;
    HRESULT _hr = get_LengthIU(fIncludeSubShapes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShape::DrawArcByThreePoints ( double xBegin, double yBegin, double xEnd, double yEnd, double xControl, double yControl ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawArcByThreePoints(xBegin, yBegin, xEnd, yEnd, xControl, yControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::DrawQuarterArc ( double xBegin, double yBegin, double xEnd, double yEnd, enum VisArcSweepFlags SweepFlag ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawQuarterArc(xBegin, yBegin, xEnd, yEnd, SweepFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVShape::DrawCircularArc ( double xCenter, double yCenter, double Radius, double StartAngle, double EndAngle ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawCircularArc(xCenter, yCenter, Radius, StartAngle, EndAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

long IVShape::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVShape::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::LinkToData ( long DataRecordsetID, long RowID, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    HRESULT _hr = raw_LinkToData(DataRecordsetID, RowID, ApplyDataGraphicAfterLink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::BreakLinkToData ( long DataRecordsetID ) {
    HRESULT _hr = raw_BreakLinkToData(DataRecordsetID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVShape::GetLinkedDataRow ( long DataRecordsetID ) {
    long _result = 0;
    HRESULT _hr = raw_GetLinkedDataRow(DataRecordsetID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::GetLinkedDataRecordsetIDs ( SAFEARRAY * * DataRecordsetIDs ) {
    HRESULT _hr = raw_GetLinkedDataRecordsetIDs(DataRecordsetIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::GetCustomPropertiesLinkedToData ( long DataRecordsetID, SAFEARRAY * * CustomPropertyIndices ) {
    HRESULT _hr = raw_GetCustomPropertiesLinkedToData(DataRecordsetID, CustomPropertyIndices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVShape::IsCustomPropertyLinked ( long DataRecordsetID, long CustomPropertyIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCustomPropertyLinked(DataRecordsetID, CustomPropertyIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVShape::GetCustomPropertyLinkedColumn ( long DataRecordsetID, long CustomPropertyIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCustomPropertyLinkedColumn(DataRecordsetID, CustomPropertyIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVShape::AutoConnect ( struct IVShape * ToShape, enum VisAutoConnectDir PlacementDir, IUnknown * Connector ) {
    HRESULT _hr = raw_AutoConnect(ToShape, PlacementDir, Connector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVMasterPtr IVShape::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

void IVShape::PutDataGraphic ( struct IVMaster * DataGraphic ) {
    HRESULT _hr = put_DataGraphic(DataGraphic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVShape::GetIsDataGraphicCallout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDataGraphicCallout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVContainerPropertiesPtr IVShape::GetContainerProperties ( ) {
    struct IVContainerProperties * _result = 0;
    HRESULT _hr = get_ContainerProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVContainerPropertiesPtr(_result, false);
}

VARIANT_BOOL IVShape::HasCategory ( _bstr_t Category ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasCategory(Category, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVShape::GetMemberOfContainers ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MemberOfContainers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVShape::ConnectedShapes ( enum VisConnectedShapesFlags Flags, _bstr_t CategoryFilter ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ConnectedShapes(Flags, CategoryFilter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVShape::GluedShapes ( enum VisGluedShapesFlags Flags, _bstr_t CategoryFilter, struct IVShape * pOtherConnectedShape ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GluedShapes(Flags, CategoryFilter, pOtherConnectedShape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::Disconnect ( enum VisConnectorEnds ConnectorEnd, double OffsetX, double OffsetY, enum VisUnitCodes Units ) {
    HRESULT _hr = raw_Disconnect(ConnectorEnd, OffsetX, OffsetY, Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVShape::GetIsCallout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCallout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVShape::GetCalloutTarget ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_CalloutTarget(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

void IVShape::PutCalloutTarget ( struct IVShape * pCalloutShape ) {
    HRESULT _hr = put_CalloutTarget(pCalloutShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IVShape::GetCalloutsAssociated ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_CalloutsAssociated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVShape::Resize ( enum VisResizeDirection Direction, double Distance, enum VisUnitCodes UnitCode ) {
    HRESULT _hr = raw_Resize(Direction, Distance, UnitCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::AddToContainers ( ) {
    HRESULT _hr = raw_AddToContainers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVShape::RemoveFromContainers ( ) {
    HRESULT _hr = raw_RemoveFromContainers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVPagePtr IVShape::CreateSubProcess ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = raw_CreateSubProcess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVSelectionPtr IVShape::MoveToSubprocess ( struct IVPage * Page, IUnknown * ObjectToDrop, struct IVShape * * NewShape ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_MoveToSubprocess(Page, ObjectToDrop, NewShape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

HRESULT IVShape::DeleteEx ( long DelFlags ) {
    HRESULT _hr = raw_DeleteEx(DelFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVShape::ReplaceShape ( IUnknown * MasterOrMasterShortcutToDrop, long ReplaceFlags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_ReplaceShape(MasterOrMasterShortcutToDrop, ReplaceFlags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVShape::SetQuickStyle ( enum VisQuickStyleMatrixIndices lineMatrix, enum VisQuickStyleMatrixIndices fillMatrix, enum VisQuickStyleMatrixIndices effectsMatrix, enum VisQuickStyleMatrixIndices fontMatrix, enum VisQuickStyleColors lineColor, enum VisQuickStyleColors fillColor, enum VisQuickStyleColors shadowColor, enum VisQuickStyleColors fontColor ) {
    HRESULT _hr = raw_SetQuickStyle(lineMatrix, fillMatrix, effectsMatrix, fontMatrix, lineColor, fillColor, shadowColor, fontColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double IVShape::ChangePicture ( _bstr_t FileName, long ChangePictureFlags ) {
    double _result = 0;
    HRESULT _hr = raw_ChangePicture(FileName, ChangePictureFlags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCommentsPtr IVShape::GetComments ( ) {
    struct IVComments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCommentsPtr(_result, false);
}

HRESULT IVShape::VisualBoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_VisualBoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVOLEObject wrapper method implementations
//

IVApplicationPtr IVOLEObject::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVShapePtr IVOLEObject::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVOLEObject::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVOLEObject::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVOLEObject::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVOLEObject::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVOLEObject::GetForeignType ( ) {
    short _result = 0;
    HRESULT _hr = get_ForeignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVOLEObject::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IVOLEObjects wrapper method implementations
//

IVApplicationPtr IVOLEObjects::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVOLEObjects::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVOLEObjects::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVOLEObjectPtr IVOLEObjects::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVOLEObject * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectPtr(_result, false);
}

short IVOLEObjects::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVOLEObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVOLEObjects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVHyperlink wrapper method implementations
//

_bstr_t IVHyperlink::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVHyperlink::PutDescription ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Description(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVApplicationPtr IVHyperlink::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVShapePtr IVHyperlink::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVHyperlink::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVHyperlink::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVHyperlink::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVHyperlink::PutAddress ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Address(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVHyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVHyperlink::PutSubAddress ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_SubAddress(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVHyperlink::GetNewWindow ( ) {
    short _result = 0;
    HRESULT _hr = get_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVHyperlink::PutNewWindow ( short lpi2Ret ) {
    HRESULT _hr = put_NewWindow(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVHyperlink::GetExtraInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtraInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVHyperlink::PutExtraInfo ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_ExtraInfo(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVHyperlink::GetFrame ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVHyperlink::PutFrame ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Frame(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVHyperlink::AddToFavorites ( const _variant_t & FavoritesTitle ) {
    HRESULT _hr = raw_AddToFavorites(FavoritesTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVHyperlink::Follow ( ) {
    HRESULT _hr = raw_Follow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVHyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVHyperlink::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVHyperlink::CreateURL ( short CanonicalForm ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CreateURL(CanonicalForm, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVHyperlink::GetRow ( ) {
    short _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVHyperlink::GetIsDefaultLink ( ) {
    short _result = 0;
    HRESULT _hr = get_IsDefaultLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVHyperlink::PutIsDefaultLink ( short lpi2Ret ) {
    HRESULT _hr = put_IsDefaultLink(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVHyperlink::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVHyperlink::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVHyperlink::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVHyperlink::PutNameU ( _bstr_t lpLocaleIndepenentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndepenentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVHyperlinks wrapper method implementations
//

IVApplicationPtr IVHyperlinks::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVShapePtr IVHyperlinks::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVHyperlinks::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVHyperlinks::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVHyperlinkPtr IVHyperlinks::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

short IVHyperlinks::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVHyperlinkPtr IVHyperlinks::Add ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

IUnknownPtr IVHyperlinks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVHyperlinkPtr IVHyperlinks::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

//
// interface IVContainerProperties wrapper method implementations
//

IVApplicationPtr IVContainerProperties::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVContainerProperties::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVContainerProperties::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVContainerProperties::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVShapePtr IVContainerProperties::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

enum VisContainerTypes IVContainerProperties::GetContainerType ( ) {
    enum VisContainerTypes _result;
    HRESULT _hr = get_ContainerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisListAlignment IVContainerProperties::GetListAlignment ( ) {
    enum VisListAlignment _result;
    HRESULT _hr = get_ListAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVContainerProperties::PutListAlignment ( enum VisListAlignment Alignment ) {
    HRESULT _hr = put_ListAlignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisListDirection IVContainerProperties::GetListDirection ( ) {
    enum VisListDirection _result;
    HRESULT _hr = get_ListDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVContainerProperties::PutListDirection ( enum VisListDirection Dir ) {
    HRESULT _hr = put_ListDirection(Dir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVContainerProperties::GetLockMembership ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockMembership(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVContainerProperties::PutLockMembership ( VARIANT_BOOL IsLocked ) {
    HRESULT _hr = put_LockMembership(IsLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisContainerAutoResize IVContainerProperties::GetResizeAsNeeded ( ) {
    enum VisContainerAutoResize _result;
    HRESULT _hr = get_ResizeAsNeeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVContainerProperties::PutResizeAsNeeded ( enum VisContainerAutoResize ResizeBehavior ) {
    HRESULT _hr = put_ResizeAsNeeded(ResizeBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVContainerProperties::Disband ( ) {
    HRESULT _hr = raw_Disband();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVContainerProperties::FitToContents ( ) {
    HRESULT _hr = raw_FitToContents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double IVContainerProperties::GetMargin ( enum VisUnitCodes MarginUnits ) {
    double _result = 0;
    HRESULT _hr = raw_GetMargin(MarginUnits, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVContainerProperties::SetMargin ( enum VisUnitCodes MarginUnits, double MarginSize ) {
    HRESULT _hr = raw_SetMargin(MarginUnits, MarginSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double IVContainerProperties::GetListSpacing ( enum VisUnitCodes SpacingUnits ) {
    double _result = 0;
    HRESULT _hr = raw_GetListSpacing(SpacingUnits, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVContainerProperties::SetListSpacing ( enum VisUnitCodes SpacingUnits, double SpacingSize ) {
    HRESULT _hr = raw_SetListSpacing(SpacingUnits, SpacingSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVContainerProperties::InsertListMember ( IUnknown * ObjectToInsert, long Position ) {
    HRESULT _hr = raw_InsertListMember(ObjectToInsert, Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVContainerProperties::GetListMemberPosition ( struct IVShape * ShapeMember ) {
    long _result = 0;
    HRESULT _hr = raw_GetListMemberPosition(ShapeMember, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisContainerMemberState IVContainerProperties::GetMemberState ( struct IVShape * Shape ) {
    enum VisContainerMemberState _result;
    HRESULT _hr = raw_GetMemberState(Shape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVContainerProperties::RemoveMember ( IUnknown * ObjectToRemove ) {
    HRESULT _hr = raw_RemoveMember(ObjectToRemove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVContainerProperties::ReorderListMember ( IUnknown * ObjectToReorder, long Position ) {
    HRESULT _hr = raw_ReorderListMember(ObjectToReorder, Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IVContainerProperties::GetListMembers ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetListMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVContainerProperties::GetMemberShapes ( long ContainerFlags ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetMemberShapes(ContainerFlags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVContainerProperties::AddMember ( IUnknown * pObjectToAdd, enum VisMemberAddOptions AddOptions ) {
    HRESULT _hr = raw_AddMember(pObjectToAdd, AddOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVContainerProperties::GetOverlappedList ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_OverlappedList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

void IVContainerProperties::PutOverlappedList ( struct IVShape * List ) {
    HRESULT _hr = put_OverlappedList(List);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVContainerProperties::RotateFlipList ( enum VisLayoutDirection Direction ) {
    HRESULT _hr = raw_RotateFlipList(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVContainerProperties::GetContainerStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVContainerProperties::PutContainerStyle ( long pStyle ) {
    HRESULT _hr = put_ContainerStyle(pStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVContainerProperties::GetHeadingStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_HeadingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVContainerProperties::PutHeadingStyle ( long pStyle ) {
    HRESULT _hr = put_HeadingStyle(pStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVAmbients wrapper method implementations
//

long IVAmbients::GetBackColor ( ) {
    long _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVAmbients::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr IVAmbients::GetFont ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IVAmbients::GetForeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVAmbients::GetLocaleID ( ) {
    long _result = 0;
    HRESULT _hr = get_LocaleID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetMessageReflect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MessageReflect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVAmbients::GetScaleUnits ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVAmbients::GetTextAlign ( ) {
    short _result = 0;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetUserMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetUIDead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UIDead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetShowGrabHandles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowGrabHandles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetShowHatching ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowHatching(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetDisplayAsDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAsDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetSupportsMnemonics ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsMnemonics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVAmbients::GetAutoClip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoClip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVAmbients::GetAppearance ( ) {
    long _result = 0;
    HRESULT _hr = get_Appearance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVAmbients::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

VARIANT_BOOL IVAmbients::GetCancelOperation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CancelOperation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVClientSite wrapper method implementations
//

IVShapePtr IVClientSite::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

//
// interface IVCell wrapper method implementations
//

IVApplicationPtr IVCell::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVCell::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCell::GetError ( ) {
    short _result = 0;
    HRESULT _hr = get_Error(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVCell::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVCell::PutFormula ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Formula(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVCell::PutFormulaForce ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FormulaForce(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVCell::GlueTo ( struct IVCell * CellObject ) {
    HRESULT _hr = raw_GlueTo(CellObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVCell::GlueToPos ( struct IVShape * SheetObject, double xPercent, double yPercent ) {
    HRESULT _hr = raw_GlueToPos(SheetObject, xPercent, yPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double IVCell::GetResult ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_Result(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVCell::PutResult ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_Result(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVCell::PutResultForce ( const _variant_t & UnitsNameOrCode, double _arg2 ) {
    HRESULT _hr = put_ResultForce(UnitsNameOrCode, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVCell::GetResultIU ( ) {
    double _result = 0;
    HRESULT _hr = get_ResultIU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVCell::PutResultIU ( double lpr8Ret ) {
    HRESULT _hr = put_ResultIU(lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVCell::PutResultIUForce ( double _arg1 ) {
    HRESULT _hr = put_ResultIUForce(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVCell::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCell::GetUnits ( ) {
    short _result = 0;
    HRESULT _hr = get_Units(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVCell::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVCell::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVCell::PutRowName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_RowName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVDocumentPtr IVCell::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVShapePtr IVCell::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVStylePtr IVCell::GetStyle ( ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

short IVCell::GetSection ( ) {
    short _result = 0;
    HRESULT _hr = get_Section(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCell::GetRow ( ) {
    short _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCell::GetColumn ( ) {
    short _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCell::GetIsConstant ( ) {
    short _result = 0;
    HRESULT _hr = get_IsConstant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCell::GetIsInherited ( ) {
    short _result = 0;
    HRESULT _hr = get_IsInherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVCell::GetResultInt ( const _variant_t & UnitsNameOrCode, short fRound ) {
    long _result = 0;
    HRESULT _hr = get_ResultInt(UnitsNameOrCode, fRound, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVCell::PutResultFromInt ( const _variant_t & UnitsNameOrCode, long _arg2 ) {
    HRESULT _hr = put_ResultFromInt(UnitsNameOrCode, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVCell::PutResultFromIntForce ( const _variant_t & UnitsNameOrCode, long _arg2 ) {
    HRESULT _hr = put_ResultFromIntForce(UnitsNameOrCode, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVCell::GetResultStr ( const _variant_t & UnitsNameOrCode ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultStr(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVCell::Trigger ( ) {
    HRESULT _hr = raw_Trigger();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVCell::GetRowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVEventListPtr IVCell::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVCell::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVRowPtr IVCell::GetContainingRow ( ) {
    struct IVRow * _result = 0;
    HRESULT _hr = get_ContainingRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVRowPtr(_result, false);
}

_bstr_t IVCell::GetFormulaU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVCell::PutFormulaU ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FormulaU(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVCell::PutFormulaForceU ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FormulaForceU(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVCell::GetRowNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowNameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVCell::PutRowNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_RowNameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVCellPtr IVCell::GetInheritedValueSource ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_InheritedValueSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

IVCellPtr IVCell::GetInheritedFormulaSource ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_InheritedFormulaSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

SAFEARRAY * IVCell::GetDependents ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Dependents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVCell::GetPrecedents ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Precedents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVCell::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVCell::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVCell::GetResultStrU ( const _variant_t & UnitsNameOrCode ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultStrU(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVConnect wrapper method implementations
//

IVApplicationPtr IVConnect::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVConnect::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVConnect::GetFromSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_FromSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVConnect::GetToSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ToSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVCellPtr IVConnect::GetFromCell ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_FromCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

IVCellPtr IVConnect::GetToCell ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_ToCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

short IVConnect::GetFromPart ( ) {
    short _result = 0;
    HRESULT _hr = get_FromPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVConnect::GetToPart ( ) {
    short _result = 0;
    HRESULT _hr = get_ToPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVConnect::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVConnect::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVConnect::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

long IVConnect::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVConnect::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVConnect::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVConnects wrapper method implementations
//

IVApplicationPtr IVConnects::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVConnectPtr IVConnects::GetItem16 ( short Index ) {
    struct IVConnect * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectPtr(_result, false);
}

short IVConnects::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVConnects::GetFromSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_FromSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVConnects::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVConnects::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVConnects::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVConnects::GetToSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ToSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVConnectPtr IVConnects::GetItem ( long Index ) {
    struct IVConnect * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectPtr(_result, false);
}

long IVConnects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVConnects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVStyle wrapper method implementations
//

IVApplicationPtr IVStyle::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVStyle::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVStyle::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStyle::PutName ( _bstr_t localeSpecificCellName ) {
    HRESULT _hr = put_Name(localeSpecificCellName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStyle::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVStyle::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

_bstr_t IVStyle::GetBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStyle::PutBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_BasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStyle::GetTextBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextBasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStyle::PutTextBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_TextBasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStyle::GetLineBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineBasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStyle::PutLineBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_LineBasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStyle::GetFillBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillBasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStyle::PutFillBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_FillBasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStyle::GetIncludesText ( ) {
    short _result = 0;
    HRESULT _hr = get_IncludesText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStyle::PutIncludesText ( short lpi2Ret ) {
    HRESULT _hr = put_IncludesText(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStyle::GetIncludesLine ( ) {
    short _result = 0;
    HRESULT _hr = get_IncludesLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStyle::PutIncludesLine ( short lpi2Ret ) {
    HRESULT _hr = put_IncludesLine(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStyle::GetIncludesFill ( ) {
    short _result = 0;
    HRESULT _hr = get_IncludesFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStyle::PutIncludesFill ( short lpi2Ret ) {
    HRESULT _hr = put_IncludesFill(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVCellPtr IVStyle::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cells(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

HRESULT IVStyle::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVEventListPtr IVStyle::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVStyle::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVStyle::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVStyle::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVStyle::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVStyle::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVStyle::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVStyle::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVStyle::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVSectionPtr IVStyle::GetSection ( short Index ) {
    struct IVSection * _result = 0;
    HRESULT _hr = get_Section(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSectionPtr(_result, false);
}

short IVStyle::GetHidden ( ) {
    short _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStyle::PutHidden ( short lpi2Ret ) {
    HRESULT _hr = put_Hidden(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStyle::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStyle::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVCellPtr IVStyle::GetCellsU ( _bstr_t localeIndependentCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsU(localeIndependentCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

short IVStyle::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExists(localeSpecificCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVStyle::GetCellExistsU ( _bstr_t localeIndependentCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExistsU(localeIndependentCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVStyle::GetFormulasU ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVCellPtr IVStyle::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsSRC(Section, Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

short IVStyle::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellsSRCExists(Section, Row, Column, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVEventList wrapper method implementations
//

IVApplicationPtr IVEventList::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVEventList::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventPtr IVEventList::GetItem ( short Index ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

short IVEventList::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventPtr IVEventList::Add ( short EventCode, short Action, _bstr_t Target, _bstr_t TargetArgs ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = raw_Add(EventCode, Action, Target, TargetArgs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

IVEventPtr IVEventList::AddAdvise ( short EventCode, const _variant_t & SinkIUnkOrIDisp, _bstr_t IIDSink, _bstr_t TargetArgs ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = raw_AddAdvise(EventCode, SinkIUnkOrIDisp, IIDSink, TargetArgs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

IVEventPtr IVEventList::GetItemFromID ( long ObjectID ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

IUnknownPtr IVEventList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVEvent wrapper method implementations
//

IVApplicationPtr IVEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVEventListPtr IVEvent::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVEvent::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVEvent::GetEvent ( ) {
    short _result = 0;
    HRESULT _hr = get_Event(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVEvent::PutEvent ( short lpi2Ret ) {
    HRESULT _hr = put_Event(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVEvent::GetAction ( ) {
    short _result = 0;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVEvent::PutAction ( short lpi2Ret ) {
    HRESULT _hr = put_Action(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVEvent::GetTarget ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVEvent::PutTarget ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Target(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVEvent::GetTargetArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVEvent::PutTargetArgs ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TargetArgs(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVEvent::Trigger ( _bstr_t ContextString ) {
    HRESULT _hr = raw_Trigger(ContextString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVEvent::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVEvent::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVEvent::GetEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVEvent::PutEnabled ( short lpi2Ret ) {
    HRESULT _hr = put_Enabled(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVEvent::GetPersistable ( ) {
    short _result = 0;
    HRESULT _hr = get_Persistable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVEvent::GetPersistent ( ) {
    short _result = 0;
    HRESULT _hr = get_Persistent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVEvent::PutPersistent ( short lpi2Ret ) {
    HRESULT _hr = put_Persistent(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IVEvent::GetFilterObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVEvent::SetFilterObjects ( SAFEARRAY * * Objects ) {
    HRESULT _hr = raw_SetFilterObjects(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IVEvent::GetFilterCommands ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterCommands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVEvent::SetFilterCommands ( SAFEARRAY * * Commands ) {
    HRESULT _hr = raw_SetFilterCommands(Commands);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IVEvent::GetFilterSRC ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterSRC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVEvent::SetFilterSRC ( SAFEARRAY * * SRCStream ) {
    HRESULT _hr = raw_SetFilterSRC(SRCStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IVEvent::GetFilterActions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVEvent::SetFilterActions ( SAFEARRAY * * filterActionStream ) {
    HRESULT _hr = raw_SetFilterActions(filterActionStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVCharacters wrapper method implementations
//

HRESULT IVCharacters::AddCustomField ( _bstr_t Formula, short Format ) {
    HRESULT _hr = raw_AddCustomField(Formula, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVCharacters::AddField ( short Category, short Code, short Format ) {
    HRESULT _hr = raw_AddField(Category, Code, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVApplicationPtr IVCharacters::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

long IVCharacters::GetBegin ( ) {
    long _result = 0;
    HRESULT _hr = get_Begin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVCharacters::PutBegin ( long lpi4Ret ) {
    HRESULT _hr = put_Begin(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVCharacters::GetCharCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CharCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVCharacters::PutCharProps ( short CellIndex, short _arg2 ) {
    HRESULT _hr = put_CharProps(CellIndex, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVCharacters::GetCharPropsRow ( short BiasLorR ) {
    short _result = 0;
    HRESULT _hr = get_CharPropsRow(BiasLorR, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVCharacters::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVCharacters::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVCharacters::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVCharacters::GetEnd ( ) {
    long _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVCharacters::PutEnd ( long lpi4Ret ) {
    HRESULT _hr = put_End(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVCharacters::GetFieldCategory ( ) {
    short _result = 0;
    HRESULT _hr = get_FieldCategory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCharacters::GetFieldCode ( ) {
    short _result = 0;
    HRESULT _hr = get_FieldCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVCharacters::GetFieldFormat ( ) {
    short _result = 0;
    HRESULT _hr = get_FieldFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVCharacters::GetFieldFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVCharacters::GetIsField ( ) {
    short _result = 0;
    HRESULT _hr = get_IsField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVCharacters::PutParaProps ( short CellIndex, short _arg2 ) {
    HRESULT _hr = put_ParaProps(CellIndex, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVCharacters::GetParaPropsRow ( short BiasLorR ) {
    short _result = 0;
    HRESULT _hr = get_ParaPropsRow(BiasLorR, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVCharacters::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVCharacters::GetTabPropsRow ( short BiasLorR ) {
    short _result = 0;
    HRESULT _hr = get_TabPropsRow(BiasLorR, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVCharacters::GetRunBegin ( short RunType ) {
    long _result = 0;
    HRESULT _hr = get_RunBegin(RunType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVCharacters::GetRunEnd ( short RunType ) {
    long _result = 0;
    HRESULT _hr = get_RunEnd(RunType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVCharacters::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVCharacters::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVCharacters::GetTextAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVCharacters::PutText ( const _variant_t & lpvarRet ) {
    HRESULT _hr = put_Text(lpvarRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVDocumentPtr IVCharacters::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVEventListPtr IVCharacters::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVCharacters::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IVCharacters::GetText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IVCharacters::AddCustomFieldU ( _bstr_t Formula, short Format ) {
    HRESULT _hr = raw_AddCustomFieldU(Formula, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVCharacters::GetFieldFormulaU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldFormulaU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVCharacters::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVCharacters::AddFieldEx ( enum VisFieldCategories Category, enum VisFieldCodes Code, enum VisFieldFormats Format, long LangID, long CalendarID ) {
    HRESULT _hr = raw_AddFieldEx(Category, Code, Format, LangID, CalendarID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVCharacters::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVCharacters::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVStyles wrapper method implementations
//

IVApplicationPtr IVStyles::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVStyles::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVStylePtr IVStyles::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

short IVStyles::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVStyles::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVStylePtr IVStyles::Add ( _bstr_t StyleName, _bstr_t BasedOn, short fIncludesText, short fIncludesLine, short fIncludesFill ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = raw_Add(StyleName, BasedOn, fIncludesText, fIncludesLine, fIncludesFill, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

short IVStyles::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVStyles::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVStyles::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVStylePtr IVStyles::GetItemFromID16 ( short ObjectID ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_ItemFromID16(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

HRESULT IVStyles::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVStyles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVStylePtr IVStyles::GetItemFromID ( long ObjectID ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

IVStylePtr IVStyles::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

HRESULT IVStyles::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IVStyles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVDocuments wrapper method implementations
//

IVDocumentPtr IVDocuments::Add ( _bstr_t FileName ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVDocumentPtr IVDocuments::Open ( _bstr_t FileName ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_Open(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVApplicationPtr IVDocuments::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDocuments::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVDocuments::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVDocuments::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVDocuments::OpenEx ( _bstr_t FileName, short Flags ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_OpenEx(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVEventListPtr IVDocuments::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVDocuments::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDocuments::GetNames ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetNames(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IVDocuments::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVDocumentPtr IVDocuments::GetItemFromID ( long ObjectID ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

VARIANT_BOOL IVDocuments::CanCheckOut ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckOut(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDocuments::CheckOut ( _bstr_t FileName ) {
    HRESULT _hr = raw_CheckOut(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVDocumentPtr IVDocuments::AddEx ( _bstr_t FileName, enum VisMeasurementSystem MeasurementSystem, long Flags, long LangID ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_AddEx(FileName, MeasurementSystem, Flags, LangID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

//
// interface IVSection wrapper method implementations
//

IVApplicationPtr IVSection::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVShapePtr IVSection::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVStylePtr IVSection::GetStyle ( ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

short IVSection::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVSection::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVSection::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVSection::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVSection::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVSection::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVRowPtr IVSection::GetRow ( short Index ) {
    struct IVRow * _result = 0;
    HRESULT _hr = get_Row(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVRowPtr(_result, false);
}

long IVSection::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVSection::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVRow wrapper method implementations
//

IVApplicationPtr IVRow::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVShapePtr IVRow::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVStylePtr IVRow::GetStyle ( ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

IVSectionPtr IVRow::GetContainingSection ( ) {
    struct IVSection * _result = 0;
    HRESULT _hr = get_ContainingSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSectionPtr(_result, false);
}

short IVRow::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVRow::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVRow::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVRow::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVRow::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVRow::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVRow::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVRow::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCellPtr IVRow::GetCell ( const _variant_t & NameOrIndex ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cell(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

_bstr_t IVRow::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVRow::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVCellPtr IVRow::GetCellU ( const _variant_t & NameOrIndex ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

HRESULT IVRow::GetPolylineData ( short Flags, SAFEARRAY * * xyArray ) {
    HRESULT _hr = raw_GetPolylineData(Flags, xyArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVRow::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVRow::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVPage wrapper method implementations
//

IVDocumentPtr IVPage::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVApplicationPtr IVPage::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVPage::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVPage::GetBackground ( ) {
    short _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVPage::PutBackground ( short lpi2Ret ) {
    HRESULT _hr = put_Background(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVPage::old_Paste ( ) {
    HRESULT _hr = raw_old_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::old_PasteSpecial ( short Format ) {
    HRESULT _hr = raw_old_PasteSpecial(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVPage::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVPage::DrawLine ( double xBegin, double yBegin, double xEnd, double yEnd ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawLine(xBegin, yBegin, xEnd, yEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DrawRectangle ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRectangle(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DrawOval ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawOval(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVPage::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVPage::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVPage::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVShapesPtr IVPage::GetShapes ( ) {
    struct IVShapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapesPtr(_result, false);
}

IVShapePtr IVPage::Drop ( IUnknown * ObjectToDrop, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::AddGuide ( short Type, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_AddGuide(Type, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVPagePtr IVPage::GetBackPageAsObj ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_BackPageAsObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

void IVPage::PutBackPageFromName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_BackPageFromName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVPage::Print ( ) {
    HRESULT _hr = raw_Print();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVPage::Import ( _bstr_t FileName ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Import(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVPage::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVLayersPtr IVPage::GetLayers ( ) {
    struct IVLayers * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayersPtr(_result, false);
}

IVShapePtr IVPage::GetPageSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_PageSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVPage::Delete ( short fRenumberPages ) {
    HRESULT _hr = raw_Delete(fRenumberPages);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVEventListPtr IVPage::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVPage::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVPage::DrawSpline ( SAFEARRAY * * xyArray, double Tolerance, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawSpline(xyArray, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DrawBezier ( SAFEARRAY * * xyArray, short degree, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawBezier(xyArray, degree, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DrawPolyline ( SAFEARRAY * * xyArray, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawPolyline(xyArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::InsertFromFile ( _bstr_t FileName, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::InsertObject ( _bstr_t ClassOrProgID, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertObject(ClassOrProgID, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVWindowPtr IVPage::OpenDrawWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenDrawWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

short IVPage::DropMany ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropMany(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVPage::GetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::GetResults ( SAFEARRAY * * SID_SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SID_SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVPage::SetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SID_SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVPage::SetResults ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SID_SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVConnectsPtr IVPage::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

_variant_t IVPage::GetBackPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BackPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVPage::PutBackPage ( const _variant_t & lpobjRet ) {
    HRESULT _hr = put_BackPage(lpobjRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVPage::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVPage::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVOLEObjectsPtr IVPage::GetOLEObjects ( ) {
    struct IVOLEObjects * _result = 0;
    HRESULT _hr = get_OLEObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectsPtr(_result, false);
}

long IVPage::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVSelectionPtr IVPage::GetSpatialSearch ( double x, double y, short Relation, double Tolerance, short Flags ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialSearch(x, y, Relation, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

_bstr_t IVPage::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVPage::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVPage::DropManyU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropManyU(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVPage::GetFormulasU ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVPage::DrawNURBS ( short degree, short Flags, SAFEARRAY * * xyArray, SAFEARRAY * * knots, const _variant_t & weights ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawNURBS(degree, Flags, xyArray, knots, weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IPictureDisp * IVPage::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVPage::PutIndex ( short lpi2Ret ) {
    HRESULT _hr = put_Index(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVPage::GetPrintTileCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PrintTileCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVPage::PrintTile ( long nTile ) {
    HRESULT _hr = raw_PrintTile(nTile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::ResizeToFitContents ( ) {
    HRESULT _hr = raw_ResizeToFitContents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::PasteSpecial ( long Format, const _variant_t & Link, const _variant_t & DisplayAsIcon ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVSelectionPtr IVPage::CreateSelection ( enum VisSelectionTypes SelType, enum VisSelectMode IterationMode, const _variant_t & Data ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_CreateSelection(SelType, IterationMode, Data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

enum VisPageTypes IVPage::GetType ( ) {
    enum VisPageTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVPage::DrawArcByThreePoints ( double xBegin, double yBegin, double xEnd, double yEnd, double xControl, double yControl ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawArcByThreePoints(xBegin, yBegin, xEnd, yEnd, xControl, yControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DrawQuarterArc ( double xBegin, double yBegin, double xEnd, double yEnd, enum VisArcSweepFlags SweepFlag ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawQuarterArc(xBegin, yBegin, xEnd, yEnd, SweepFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DrawCircularArc ( double xCenter, double yCenter, double Radius, double StartAngle, double EndAngle ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawCircularArc(xCenter, yCenter, Radius, StartAngle, EndAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

long IVPage::GetReviewerID ( ) {
    long _result = 0;
    HRESULT _hr = get_ReviewerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPagePtr IVPage::GetOriginalPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_OriginalPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

HRESULT IVPage::GetShapesLinkedToData ( long DataRecordsetID, SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_GetShapesLinkedToData(DataRecordsetID, ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::GetShapesLinkedToDataRow ( long DataRecordsetID, long DataRowID, SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_GetShapesLinkedToDataRow(DataRecordsetID, DataRowID, ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::LinkShapesToDataRows ( long DataRecordsetID, SAFEARRAY * * DataRowIDs, SAFEARRAY * * ShapeIDs, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    HRESULT _hr = raw_LinkShapesToDataRows(DataRecordsetID, DataRowIDs, ShapeIDs, ApplyDataGraphicAfterLink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::ShapeIDsToUniqueIDs ( SAFEARRAY * * ShapeIDs, enum VisUniqueIDArgs UniqueIDArgs, SAFEARRAY * * GUIDs ) {
    HRESULT _hr = raw_ShapeIDsToUniqueIDs(ShapeIDs, UniqueIDArgs, GUIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::UniqueIDsToShapeIDs ( SAFEARRAY * * GUIDs, SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_UniqueIDsToShapeIDs(GUIDs, ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVPage::DropLinked ( IUnknown * ObjectToDrop, double x, double y, long DataRecordsetID, long DataRowID, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DropLinked(ObjectToDrop, x, y, DataRecordsetID, DataRowID, ApplyDataGraphicAfterLink, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

long IVPage::DropManyLinkedU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * XYs, long DataRecordsetID, SAFEARRAY * * DataRowIDs, VARIANT_BOOL ApplyDataGraphicAfterLink, SAFEARRAY * * ShapeIDs ) {
    long _result = 0;
    HRESULT _hr = raw_DropManyLinkedU(ObjectsToInstance, XYs, DataRecordsetID, DataRowIDs, ApplyDataGraphicAfterLink, ShapeIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IVPage::GetThemeColors ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ThemeColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVPage::PutThemeColors ( const _variant_t & pVar ) {
    HRESULT _hr = put_ThemeColors(pVar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVPage::GetThemeEffects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ThemeEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVPage::PutThemeEffects ( const _variant_t & pVar ) {
    HRESULT _hr = put_ThemeEffects(pVar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVShapePtr IVPage::DropConnected ( IUnknown * ObjectToDrop, struct IVShape * TargetShape, enum VisAutoConnectDir PlacementDir, IUnknown * Connector ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DropConnected(ObjectToDrop, TargetShape, PlacementDir, Connector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

long IVPage::AutoConnectMany ( SAFEARRAY * * FromShapeIDs, SAFEARRAY * * ToShapeIDs, SAFEARRAY * * PlacementDirs, IUnknown * Connector ) {
    long _result = 0;
    HRESULT _hr = raw_AutoConnectMany(FromShapeIDs, ToShapeIDs, PlacementDirs, Connector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVPage::DropContainer ( IUnknown * ObjectToDrop, IUnknown * TargetShapes ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DropContainer(ObjectToDrop, TargetShapes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVPage::LayoutIncremental ( enum VisLayoutIncrementalType AlignOrSpace, enum VisLayoutHorzAlignType AlignHorizontal, enum VisLayoutVertAlignType AlignVertical, double SpaceHorizontal, double SpaceVertical, enum VisUnitCodes UnitsNameOrCode ) {
    HRESULT _hr = raw_LayoutIncremental(AlignOrSpace, AlignHorizontal, AlignVertical, SpaceHorizontal, SpaceVertical, UnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::LayoutChangeDirection ( enum VisLayoutDirection Direction ) {
    HRESULT _hr = raw_LayoutChangeDirection(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::AvoidPageBreaks ( ) {
    HRESULT _hr = raw_AvoidPageBreaks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVPage::SplitConnector ( struct IVShape * ConnectorToSplit, struct IVShape * Shape ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_SplitConnector(ConnectorToSplit, Shape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DropCallout ( IUnknown * ObjectToDrop, struct IVShape * TargetShape ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DropCallout(ObjectToDrop, TargetShape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVPage::PasteToLocation ( double xPos, double yPos, long Flags ) {
    HRESULT _hr = raw_PasteToLocation(xPos, yPos, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IVPage::GetContainers ( enum VisContainerNested NestedOptions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetContainers(NestedOptions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVPage::GetCallouts ( enum VisContainerNested NestedOptions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetCallouts(NestedOptions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVPage::GetLayoutRoutePassive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutRoutePassive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVPage::PutLayoutRoutePassive ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_LayoutRoutePassive(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVShapePtr IVPage::DropLegend ( IUnknown * OuterList, IUnknown * InnerContainer, enum VisLegendFlags populateFlags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DropLegend(OuterList, InnerContainer, populateFlags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVPage::DropIntoList ( IUnknown * ObjectToDrop, struct IVShape * TargetList, long lPosition ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DropIntoList(ObjectToDrop, TargetList, lPosition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

VARIANT_BOOL IVPage::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVPage::PutAutoSize ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_AutoSize(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVPage::AutoSizeDrawing ( ) {
    HRESULT _hr = raw_AutoSizeDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVPagePtr IVPage::Duplicate ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

_variant_t IVPage::GetTheme ( enum VisThemeTypes eThemeType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetTheme(eThemeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IVPage::SetTheme ( const _variant_t & varThemeIndex, const _variant_t & varColorScheme, const _variant_t & varEffectScheme, const _variant_t & varConnectorScheme, const _variant_t & varFontScheme ) {
    HRESULT _hr = raw_SetTheme(varThemeIndex, varColorScheme, varEffectScheme, varConnectorScheme, varFontScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVCommentsPtr IVPage::GetComments ( ) {
    struct IVComments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCommentsPtr(_result, false);
}

IVCommentsPtr IVPage::GetShapeComments ( ) {
    struct IVComments * _result = 0;
    HRESULT _hr = get_ShapeComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCommentsPtr(_result, false);
}

HRESULT IVPage::GetThemeVariant ( short * pVariantColor, short * pVariantStyle, short * pEmbellishment ) {
    HRESULT _hr = raw_GetThemeVariant(pVariantColor, pVariantStyle, pEmbellishment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::SetThemeVariant ( short variantColor, short variantStyle, short embellishment ) {
    HRESULT _hr = raw_SetThemeVariant(variantColor, variantStyle, embellishment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVPage::VisualBoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_VisualBoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVLayer wrapper method implementations
//

IVApplicationPtr IVLayer::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVLayer::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVLayer::GetPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVMasterPtr IVLayer::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

short IVLayer::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVLayer::GetRow ( ) {
    short _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVLayer::Add ( struct IVShape * SheetObject, short fPresMems ) {
    HRESULT _hr = raw_Add(SheetObject, fPresMems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVLayer::Remove ( struct IVShape * SheetObject, short fPresMems ) {
    HRESULT _hr = raw_Remove(SheetObject, fPresMems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVLayer::Delete ( short fDeleteShapes ) {
    HRESULT _hr = raw_Delete(fDeleteShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVLayer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVLayer::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVCellPtr IVLayer::GetCellsC ( short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsC(Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

short IVLayer::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVLayer::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVLayer::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVLayer::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVLayer::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVLayer::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVLayers wrapper method implementations
//

IVApplicationPtr IVLayers::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVLayers::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVLayers::GetPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVMasterPtr IVLayers::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

short IVLayers::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVLayerPtr IVLayers::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

IVLayerPtr IVLayers::Add ( _bstr_t LayerName ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = raw_Add(LayerName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

short IVLayers::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVLayers::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVLayers::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVLayers::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVLayerPtr IVLayers::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

IUnknownPtr IVLayers::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVSelection wrapper method implementations
//

IVApplicationPtr IVSelection::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVSelection::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVSelection::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVSelection::GetItem16 ( short Index ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVSelection::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVSelection::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVDocumentPtr IVSelection::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVSelection::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVMasterPtr IVSelection::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IVShapePtr IVSelection::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVSelection::BringForward ( ) {
    HRESULT _hr = raw_BringForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::SendBackward ( ) {
    HRESULT _hr = raw_SendBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVSelection::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVSelection::PutStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_Style(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVSelection::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVSelection::GetLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVSelection::PutLineStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_LineStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVSelection::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LineStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVSelection::GetFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVSelection::PutFillStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_FillStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVSelection::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FillStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVSelection::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVSelection::PutTextStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_TextStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVSelection::PutTextStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_TextStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVSelection::Combine ( ) {
    HRESULT _hr = raw_Combine();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Fragment ( ) {
    HRESULT _hr = raw_Fragment();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Intersect ( ) {
    HRESULT _hr = raw_Intersect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Subtract ( ) {
    HRESULT _hr = raw_Subtract();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Union ( ) {
    HRESULT _hr = raw_Union();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::FlipHorizontal ( ) {
    HRESULT _hr = raw_FlipHorizontal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::FlipVertical ( ) {
    HRESULT _hr = raw_FlipVertical();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::ReverseEnds ( ) {
    HRESULT _hr = raw_ReverseEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Rotate90 ( ) {
    HRESULT _hr = raw_Rotate90();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::old_Copy ( ) {
    HRESULT _hr = raw_old_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::old_Cut ( ) {
    HRESULT _hr = raw_old_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::VoidDuplicate ( ) {
    HRESULT _hr = raw_VoidDuplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::VoidGroup ( ) {
    HRESULT _hr = raw_VoidGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::ConvertToGroup ( ) {
    HRESULT _hr = raw_ConvertToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Ungroup ( ) {
    HRESULT _hr = raw_Ungroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::DeselectAll ( ) {
    HRESULT _hr = raw_DeselectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Select ( struct IVShape * SheetObject, short SelectAction ) {
    HRESULT _hr = raw_Select(SheetObject, SelectAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVEventListPtr IVSelection::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVSelection::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVSelection::Trim ( ) {
    HRESULT _hr = raw_Trim();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Join ( ) {
    HRESULT _hr = raw_Join();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::FitCurve ( double Tolerance, short Flags ) {
    HRESULT _hr = raw_FitCurve(Tolerance, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVSelection::GetItem ( long Index ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

long IVSelection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVSelection::DrawRegion ( double Tolerance, short Flags, const _variant_t & x, const _variant_t & y, const _variant_t & ResultsMaster ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRegion(Tolerance, Flags, x, y, ResultsMaster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IUnknownPtr IVSelection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

long IVSelection::GetIterationMode ( ) {
    long _result = 0;
    HRESULT _hr = get_IterationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVSelection::PutIterationMode ( long lpi4Ret ) {
    HRESULT _hr = put_IterationMode(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVSelection::GetItemStatus ( long Index ) {
    short _result = 0;
    HRESULT _hr = get_ItemStatus(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVSelection::GetPrimaryItem ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_PrimaryItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IPictureDisp * IVSelection::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVSelection::Group ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVSelection::SwapEnds ( ) {
    HRESULT _hr = raw_SwapEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::AddToGroup ( ) {
    HRESULT _hr = raw_AddToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::RemoveFromGroup ( ) {
    HRESULT _hr = raw_RemoveFromGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVSelectionPtr IVSelection::Duplicate ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

HRESULT IVSelection::Copy ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Copy(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Cut ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Cut(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Move ( double dx, double dy, const _variant_t & UnitsNameOrCode ) {
    HRESULT _hr = raw_Move(dx, dy, UnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Rotate ( double Angle, const _variant_t & AngleUnitsNameOrCode, VARIANT_BOOL BlastGuards, enum VisRotationTypes RotationType, double PinX, double PinY, const _variant_t & PinUnitsNameOrCode ) {
    HRESULT _hr = raw_Rotate(Angle, AngleUnitsNameOrCode, BlastGuards, RotationType, PinX, PinY, PinUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Align ( enum VisHorizontalAlignTypes AlignHorizontal, enum VisVerticalAlignTypes AlignVertical, VARIANT_BOOL GlueToGuide ) {
    HRESULT _hr = raw_Align(AlignHorizontal, AlignVertical, GlueToGuide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Distribute ( enum VisDistributeTypes Distribute, VARIANT_BOOL GlueToGuide ) {
    HRESULT _hr = raw_Distribute(Distribute, GlueToGuide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::UpdateAlignmentBox ( ) {
    HRESULT _hr = raw_UpdateAlignmentBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Offset ( double Distance ) {
    HRESULT _hr = raw_Offset(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::ConnectShapes ( ) {
    HRESULT _hr = raw_ConnectShapes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Flip ( enum VisFlipDirection FlipDirection, enum VisFlipTypes FlipType, VARIANT_BOOL BlastGuards, double PinX, double PinY, const _variant_t & PinUnitsNameOrCode ) {
    HRESULT _hr = raw_Flip(FlipDirection, FlipType, BlastGuards, PinX, PinY, PinUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVSelection::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVSelection::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVSelection::LinkToData ( long DataRecordsetID, long DataRowID, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    HRESULT _hr = raw_LinkToData(DataRecordsetID, DataRowID, ApplyDataGraphicAfterLink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::BreakLinkToData ( long DataRecordsetID ) {
    HRESULT _hr = raw_BreakLinkToData(DataRecordsetID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::GetIDs ( SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_GetIDs(ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVSelection::AutomaticLink ( long DataRecordsetID, SAFEARRAY * * ColumnNames, SAFEARRAY * * AutoLinkFieldTypes, SAFEARRAY * * FieldNames, long AutoLinkBehavior, SAFEARRAY * * ShapeIDs ) {
    long _result = 0;
    HRESULT _hr = raw_AutomaticLink(DataRecordsetID, ColumnNames, AutoLinkFieldTypes, FieldNames, AutoLinkBehavior, ShapeIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMasterPtr IVSelection::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

void IVSelection::PutDataGraphic ( struct IVMaster * DataGraphic ) {
    HRESULT _hr = put_DataGraphic(DataGraphic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVSelection::LayoutIncremental ( enum VisLayoutIncrementalType AlignOrSpace, enum VisLayoutHorzAlignType AlignHorizontal, enum VisLayoutVertAlignType AlignVertical, double SpaceHorizontal, double SpaceVertical, enum VisUnitCodes UnitCode ) {
    HRESULT _hr = raw_LayoutIncremental(AlignOrSpace, AlignHorizontal, AlignVertical, SpaceHorizontal, SpaceVertical, UnitCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::LayoutChangeDirection ( enum VisLayoutDirection Direction ) {
    HRESULT _hr = raw_LayoutChangeDirection(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::AvoidPageBreaks ( ) {
    HRESULT _hr = raw_AvoidPageBreaks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::Resize ( enum VisResizeDirection Direction, double Distance, enum VisUnitCodes UnitCode ) {
    HRESULT _hr = raw_Resize(Direction, Distance, UnitCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::AddToContainers ( ) {
    HRESULT _hr = raw_AddToContainers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::RemoveFromContainers ( ) {
    HRESULT _hr = raw_RemoveFromContainers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVSelectionPtr IVSelection::MoveToSubprocess ( struct IVPage * Page, IUnknown * ObjectToDrop, struct IVShape * * NewShape ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_MoveToSubprocess(Page, ObjectToDrop, NewShape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

IVSelectionPtr IVSelection::GetSelectionForDragCopy ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SelectionForDragCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

HRESULT IVSelection::DeleteEx ( long DelFlags ) {
    HRESULT _hr = raw_DeleteEx(DelFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IVSelection::GetContainers ( enum VisContainerNested NestedOptions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetContainers(NestedOptions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVSelection::GetCallouts ( enum VisContainerNested NestedOptions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetCallouts(NestedOptions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVSelection::MemberOfContainersUnion ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_MemberOfContainersUnion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVSelection::MemberOfContainersIntersection ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_MemberOfContainersIntersection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVSelection::SetContainerFormat ( enum VisContainerFormatType FormatType, const _variant_t & FormatValue ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_SetContainerFormat(FormatType, FormatValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVSelection::ReplaceShape ( IUnknown * MasterOrMasterShortcutToDrop, long ReplaceFlags ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ReplaceShape(MasterOrMasterShortcutToDrop, ReplaceFlags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVSelection::SetQuickStyle ( enum VisQuickStyleMatrixIndices lineMatrix, enum VisQuickStyleMatrixIndices fillMatrix, enum VisQuickStyleMatrixIndices effectsMatrix, enum VisQuickStyleMatrixIndices fontMatrix, enum VisQuickStyleColors lineColor, enum VisQuickStyleColors fillColor, enum VisQuickStyleColors shadowColor, enum VisQuickStyleColors fontColor ) {
    HRESULT _hr = raw_SetQuickStyle(lineMatrix, fillMatrix, effectsMatrix, fontMatrix, lineColor, fillColor, shadowColor, fontColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVSelection::VisualBoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_VisualBoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVPages wrapper method implementations
//

IVApplicationPtr IVPages::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVPages::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPagePtr IVPages::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

short IVPages::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPagePtr IVPages::Add ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVDocumentPtr IVPages::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVPages::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVPages::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVPages::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVPages::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVPagePtr IVPages::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

HRESULT IVPages::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IVPages::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVPagePtr IVPages::GetItemFromID ( long nID ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

//
// interface IVRelatedShapePairEvent wrapper method implementations
//

short IVRelatedShapePairEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVRelatedShapePairEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPagePtr IVRelatedShapePairEvent::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

long IVRelatedShapePairEvent::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVRelatedShapePairEvent::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

long IVRelatedShapePairEvent::GetFromShapeID ( ) {
    long _result = 0;
    HRESULT _hr = get_FromShapeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVRelatedShapePairEvent::GetToShapeID ( ) {
    long _result = 0;
    HRESULT _hr = get_ToShapeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVMovedSelectionEvent wrapper method implementations
//

IVApplicationPtr IVMovedSelectionEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVMovedSelectionEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVMovedSelectionEvent::GetReplacementShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ReplacementShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVSelectionPtr IVMovedSelectionEvent::GetSelectionSource ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SelectionSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

IVSelectionPtr IVMovedSelectionEvent::GetSelectionTarget ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SelectionTarget(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

short IVMovedSelectionEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVReplaceShapesEvent wrapper method implementations
//

IVApplicationPtr IVReplaceShapesEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVReplaceShapesEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IVReplaceShapesEvent::GetReplacementMaster ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ReplacementMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVSelectionPtr IVReplaceShapesEvent::GetSelectionSource ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SelectionSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

long IVReplaceShapesEvent::GetReplaceFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_ReplaceFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVReplaceShapesEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVWindow wrapper method implementations
//

IVApplicationPtr IVWindow::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVWindow::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVWindow::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVWindow::GetType ( ) {
    short _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVWindow::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVWindow::GetPageAsObj ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_PageAsObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

void IVWindow::PutPageFromName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_PageFromName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVWindow::GetZoom ( ) {
    double _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutZoom ( double lpr8Ret ) {
    HRESULT _hr = put_Zoom(lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::DeselectAll ( ) {
    HRESULT _hr = raw_DeselectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVSelectionPtr IVWindow::GetSelection ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

HRESULT IVWindow::Select ( struct IVShape * SheetObject, short SelectAction ) {
    HRESULT _hr = raw_Select(SheetObject, SelectAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVWindow::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVWindow::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Duplicate ( ) {
    HRESULT _hr = raw_Duplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Group ( ) {
    HRESULT _hr = raw_Group();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Union ( ) {
    HRESULT _hr = raw_Union();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Combine ( ) {
    HRESULT _hr = raw_Combine();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Fragment ( ) {
    HRESULT _hr = raw_Fragment();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::AddToGroup ( ) {
    HRESULT _hr = raw_AddToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::RemoveFromGroup ( ) {
    HRESULT _hr = raw_RemoveFromGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVWindow::GetSubType ( ) {
    short _result = 0;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVWindow::Intersect ( ) {
    HRESULT _hr = raw_Intersect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Subtract ( ) {
    HRESULT _hr = raw_Subtract();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVEventListPtr IVWindow::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVWindow::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVWindow::GetWindowHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_WindowHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVWindow::GetWindowHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVWindow::Trim ( ) {
    HRESULT _hr = raw_Trim();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::Join ( ) {
    HRESULT _hr = raw_Join();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVWindow::GetShowRulers ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowRulers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowRulers ( short lpi2Ret ) {
    HRESULT _hr = put_ShowRulers(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVWindow::GetShowGrid ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowGrid ( short lpi2Ret ) {
    HRESULT _hr = put_ShowGrid(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVWindow::GetShowGuides ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowGuides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowGuides ( short lpi2Ret ) {
    HRESULT _hr = put_ShowGuides(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVWindow::GetShowConnectPoints ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowConnectPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowConnectPoints ( short lpi2Ret ) {
    HRESULT _hr = put_ShowConnectPoints(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVWindow::GetShowPageBreaks ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowPageBreaks ( short lpi2Ret ) {
    HRESULT _hr = put_ShowPageBreaks(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVWindow::GetPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVWindow::PutPage ( const _variant_t & lpobjRet ) {
    HRESULT _hr = put_Page(lpobjRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVWindow::DockedStencils ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_DockedStencils(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IVWindow::GetMaster ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

short IVWindow::GetShowScrollBars ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowScrollBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowScrollBars ( short lpi2Ret ) {
    HRESULT _hr = put_ShowScrollBars(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVWindow::PutCaption ( _bstr_t pbstrCaption ) {
    HRESULT _hr = put_Caption(pbstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVWindowsPtr IVWindow::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

HRESULT IVWindow::Scroll ( long nxFlags, long nyFlags ) {
    HRESULT _hr = raw_Scroll(nxFlags, nyFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::ScrollViewTo ( double x, double y ) {
    HRESULT _hr = raw_ScrollViewTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::GetViewRect ( double * pdLeft, double * pdTop, double * pdWidth, double * pdHeight ) {
    HRESULT _hr = raw_GetViewRect(pdLeft, pdTop, pdWidth, pdHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::SetViewRect ( double dLeft, double dTop, double dWidth, double dHeight ) {
    HRESULT _hr = raw_SetViewRect(dLeft, dTop, dWidth, dHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::GetWindowRect ( long * pnLeft, long * pnTop, long * pnWidth, long * pnHeight ) {
    HRESULT _hr = raw_GetWindowRect(pnLeft, pnTop, pnWidth, pnHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVWindow::SetWindowRect ( long nLeft, long nTop, long nWidth, long nHeight ) {
    HRESULT _hr = raw_SetWindowRect(nLeft, nTop, nWidth, nHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVWindow::GetWindowState ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutWindowState ( long pnState ) {
    HRESULT _hr = put_WindowState(pnState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVWindow::GetViewFit ( ) {
    long _result = 0;
    HRESULT _hr = get_ViewFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutViewFit ( long pnFit ) {
    HRESULT _hr = put_ViewFit(pnFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetIsEditingText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditingText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVWindow::GetIsEditingOLE ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditingOLE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowsPtr IVWindow::GetParent ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

IVMasterShortcutPtr IVWindow::GetMasterShortcut ( ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_MasterShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

long IVWindow::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVWindow::GetParentWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ParentWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

_bstr_t IVWindow::GetMergeID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MergeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVWindow::GetMergeClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MergeClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVWindow::GetMergePosition ( ) {
    long _result = 0;
    HRESULT _hr = get_MergePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVWindow::GetAllowEditing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutAllowEditing ( VARIANT_BOOL pbAllowEditing ) {
    HRESULT _hr = put_AllowEditing(pbAllowEditing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IVWindow::GetPageTabWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_PageTabWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutPageTabWidth ( double pdWidth ) {
    HRESULT _hr = put_PageTabWidth(pdWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetShowPageTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPageTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowPageTabs ( VARIANT_BOOL pbShow ) {
    HRESULT _hr = put_ShowPageTabs(pbShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVWindow::PutMergeID ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_MergeID(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVWindow::PutMergeClass ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_MergeClass(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVWindow::PutMergePosition ( long pnRet ) {
    HRESULT _hr = put_MergePosition(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetInPlace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InPlace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVWindow::GetMergeCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MergeCaption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVWindow::PutMergeCaption ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_MergeCaption(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * IVWindow::GetIcon ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutRefIcon ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_Icon(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVShapePtr IVWindow::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVCellPtr IVWindow::GetSelectedCell ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_SelectedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

IVWindowPtr IVWindow::NewWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

OLE_COLOR IVWindow::GetBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IVWindow::GetBackgroundColorGradient ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackgroundColorGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutBackgroundColorGradient ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BackgroundColorGradient(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetShowPageOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPageOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutShowPageOutline ( VARIANT_BOOL Show ) {
    HRESULT _hr = put_ShowPageOutline(Show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetScrollLock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScrollLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutScrollLock ( VARIANT_BOOL Lock ) {
    HRESULT _hr = put_ScrollLock(Lock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetZoomLock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZoomLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutZoomLock ( VARIANT_BOOL Lock ) {
    HRESULT _hr = put_ZoomLock(Lock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisZoomBehavior IVWindow::GetZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_ZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_ZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IVWindow::GetSelectedMasters ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SelectedMasters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVCharactersPtr IVWindow::GetSelectedText ( ) {
    struct IVCharacters * _result = 0;
    HRESULT _hr = get_SelectedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCharactersPtr(_result, false);
}

void IVWindow::PutSelectedText ( struct IVCharacters * ppObjReturn ) {
    HRESULT _hr = put_SelectedText(ppObjReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVWindow::GetReviewerMarkupVisible ( long ReviewerID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReviewerMarkupVisible(ReviewerID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutReviewerMarkupVisible ( long ReviewerID, VARIANT_BOOL viewStatus ) {
    HRESULT _hr = put_ReviewerMarkupVisible(ReviewerID, viewStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVWindow::PutSelection ( struct IVSelection * lpdispRet ) {
    HRESULT _hr = put_Selection(lpdispRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVDataRecordsetPtr IVWindow::GetSelectedDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_SelectedDataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

void IVWindow::PutSelectedDataRecordset ( struct IVDataRecordset * DataRecordset ) {
    HRESULT _hr = put_SelectedDataRecordset(DataRecordset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVWindow::GetSelectedDataRowID ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectedDataRowID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVWindow::PutSelectedDataRowID ( long DataRowID ) {
    HRESULT _hr = put_SelectedDataRowID(DataRowID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVSelectionPtr IVWindow::GetSelectionForDragCopy ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SelectionForDragCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

void IVWindow::PutSelectedValidationIssue ( struct IVValidationIssue * pIssue ) {
    HRESULT _hr = put_SelectedValidationIssue(pIssue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVValidationIssuePtr IVWindow::GetSelectedValidationIssue ( ) {
    struct IVValidationIssue * _result = 0;
    HRESULT _hr = get_SelectedValidationIssue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationIssuePtr(_result, false);
}

HRESULT IVWindow::CenterViewOnShape ( struct IVShape * SheetObject, enum VisCenterViewFlags Flags ) {
    HRESULT _hr = raw_CenterViewOnShape(SheetObject, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVWindows wrapper method implementations
//

IVApplicationPtr IVWindows::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVWindows::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVWindows::GetItem ( short Index ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

short IVWindows::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVWindows::VoidArrange ( ) {
    HRESULT _hr = raw_VoidArrange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVEventListPtr IVWindows::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVWindows::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVWindows::Add_WithoutMergeArgs ( const _variant_t & bstrCaption, const _variant_t & nFlags, const _variant_t & nType, const _variant_t & nLeft, const _variant_t & nTop, const _variant_t & nWidth, const _variant_t & nHeight ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_Add_WithoutMergeArgs(bstrCaption, nFlags, nType, nLeft, nTop, nWidth, nHeight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

HRESULT IVWindows::Arrange ( const _variant_t & nArrangeFlags ) {
    HRESULT _hr = raw_Arrange(nArrangeFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IVWindows::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVWindowPtr IVWindows::GetItemFromID ( long nID ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVWindowPtr IVWindows::Add ( const _variant_t & bstrCaption, const _variant_t & nFlags, const _variant_t & nType, const _variant_t & nLeft, const _variant_t & nTop, const _variant_t & nWidth, const _variant_t & nHeight, const _variant_t & bstrMergeID, const _variant_t & bstrMergeClass, const _variant_t & nMergePosition ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_Add(bstrCaption, nFlags, nType, nLeft, nTop, nWidth, nHeight, bstrMergeID, bstrMergeClass, nMergePosition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVWindowPtr IVWindows::GetItemEx ( const _variant_t & CaptionOrIndex ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ItemEx(CaptionOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

//
// interface IVMasterShortcut wrapper method implementations
//

IVApplicationPtr IVMasterShortcut::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVMasterShortcut::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVMasterShortcut::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMasterShortcut::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMasterShortcut::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVMasterShortcut::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMasterShortcut::GetPrompt ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutPrompt ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Prompt(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMasterShortcut::GetAlignName ( ) {
    short _result = 0;
    HRESULT _hr = get_AlignName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMasterShortcut::PutAlignName ( short lpi2Ret ) {
    HRESULT _hr = put_AlignName(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMasterShortcut::GetIconSize ( ) {
    short _result = 0;
    HRESULT _hr = get_IconSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMasterShortcut::PutIconSize ( short lpi2Ret ) {
    HRESULT _hr = put_IconSize(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVMasterShortcut::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMasterShortcut::ImportIcon ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportIcon(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVMasterShortcut::ExportIcon ( _bstr_t FileName, short Flags, const _variant_t & TransparentRGB ) {
    HRESULT _hr = raw_ExportIcon(FileName, Flags, TransparentRGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVMasterShortcut::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVMasterShortcut::OpenIconWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenIconWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

_bstr_t IVMasterShortcut::GetTargetDocumentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetDocumentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutTargetDocumentName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TargetDocumentName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMasterShortcut::GetTargetMasterName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetMasterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutTargetMasterName ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_TargetMasterName(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMasterShortcut::GetTargetBaseID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBaseID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutTargetBaseID ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TargetBaseID(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMasterShortcut::GetDropActions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DropActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutDropActions ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_DropActions(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMasterShortcut::GetShapeHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapeHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutShapeHelp ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_ShapeHelp(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMasterShortcut::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMasterShortcut::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMasterShortcut::GetIndexInStencil ( ) {
    short _result = 0;
    HRESULT _hr = get_IndexInStencil(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IPictureDisp * IVMasterShortcut::GetIcon ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMasterShortcut::PutRefIcon ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_Icon(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVMasterShortcut::PutIndexInStencil ( short lpi2Ret ) {
    HRESULT _hr = put_IndexInStencil(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVMasterShortcuts wrapper method implementations
//

IVApplicationPtr IVMasterShortcuts::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVMasterShortcuts::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVMasterShortcuts::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMasterShortcuts::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMasterShortcutPtr IVMasterShortcuts::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

short IVMasterShortcuts::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVMasterShortcuts::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVMasterShortcutPtr IVMasterShortcuts::Drop ( IUnknown * ObjectToDrop, short xPos, short yPos ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

IVMasterShortcutPtr IVMasterShortcuts::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

HRESULT IVMasterShortcuts::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IVMasterShortcuts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVMasterShortcutPtr IVMasterShortcuts::GetItemFromID ( long nID ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

HRESULT IVMasterShortcuts::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVMouseEvent wrapper method implementations
//

_bstr_t IVMouseEvent::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVApplicationPtr IVMouseEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

enum VisObjectTypes IVMouseEvent::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVMouseEvent::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

long IVMouseEvent::GetButton ( ) {
    long _result = 0;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVMouseEvent::GetKeyButtonState ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyButtonState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVMouseEvent::Getx ( ) {
    double _result = 0;
    HRESULT _hr = get_x(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IVMouseEvent::Gety ( ) {
    double _result = 0;
    HRESULT _hr = get_y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisMouseMoveDragStates IVMouseEvent::GetDragState ( ) {
    enum VisMouseMoveDragStates _result;
    HRESULT _hr = get_DragState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMouseEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVKeyboardEvent wrapper method implementations
//

_bstr_t IVKeyboardEvent::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVApplicationPtr IVKeyboardEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

enum VisObjectTypes IVKeyboardEvent::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVKeyboardEvent::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

long IVKeyboardEvent::GetKeyCode ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVKeyboardEvent::GetKeyButtonState ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyButtonState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVKeyboardEvent::GetKeyAscii ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVKeyboardEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVGlobal wrapper method implementations
//

IVApplicationPtr IVGlobal::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentPtr IVGlobal::GetActiveDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVGlobal::GetActivePage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ActivePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVWindowPtr IVGlobal::GetActiveWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVDocumentsPtr IVGlobal::GetDocuments ( ) {
    struct IVDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentsPtr(_result, false);
}

IVWindowsPtr IVGlobal::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

IVAddonsPtr IVGlobal::GetAddons ( ) {
    struct IVAddons * _result = 0;
    HRESULT _hr = get_Addons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonsPtr(_result, false);
}

IDispatchPtr IVGlobal::GetVbe ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vbe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IVExtender wrapper method implementations
//

_bstr_t IVExtender::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutName ( _bstr_t pbstr ) {
    HRESULT _hr = put_Name(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr IVExtender::GetObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IUnknownPtr IVExtender::GetParent ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IVExtender::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::Index ( ) {
    HRESULT _hr = raw_Index();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVShapePtr IVExtender::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVExtender::VoidGroup ( ) {
    HRESULT _hr = raw_VoidGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::BringForward ( ) {
    HRESULT _hr = raw_BringForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::ConvertToGroup ( ) {
    HRESULT _hr = raw_ConvertToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::SendBackward ( ) {
    HRESULT _hr = raw_SendBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVDocumentPtr IVExtender::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IDispatchPtr IVExtender::GetShapeParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ShapeParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IVApplicationPtr IVExtender::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVMasterPtr IVExtender::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IVCellPtr IVExtender::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cells(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

IVCellPtr IVExtender::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsSRC(Section, Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

_bstr_t IVExtender::GetData1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutData1 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data1(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVExtender::GetData2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutData2 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data2(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVExtender::GetData3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutData3 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data3(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVExtender::GetHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Help(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutHelp ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Help(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVExtender::GetNameID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVExtender::ShapeCopy ( ) {
    HRESULT _hr = raw_ShapeCopy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::ShapeCut ( ) {
    HRESULT _hr = raw_ShapeCut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::ShapeDelete ( ) {
    HRESULT _hr = raw_ShapeDelete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::VoidShapeDuplicate ( ) {
    HRESULT _hr = raw_VoidShapeDuplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVExtender::GetRowCount ( short Section ) {
    short _result = 0;
    HRESULT _hr = get_RowCount(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::AddSection ( short Section ) {
    short _result = 0;
    HRESULT _hr = raw_AddSection(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVExtender::DeleteSection ( short Section ) {
    HRESULT _hr = raw_DeleteSection(Section);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVExtender::AddRow ( short Section, short Row, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddRow(Section, Row, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVExtender::DeleteRow ( short Section, short Row ) {
    HRESULT _hr = raw_DeleteRow(Section, Row);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVExtender::GetRowsCellCount ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowsCellCount(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::GetRowType ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowType(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVExtender::PutRowType ( short Section, short Row, short lpi2Ret ) {
    HRESULT _hr = put_RowType(Section, Row, lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVExtender::SetCenter ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetCenter(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVConnectsPtr IVExtender::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

short IVExtender::GetShapeIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ShapeIndex16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVExtender::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutStyle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Style(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVExtender::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVExtender::GetLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutLineStyle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_LineStyle(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVExtender::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LineStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVExtender::GetFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVExtender::PutFillStyle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FillStyle(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IVExtender::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FillStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVExtender::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVExtender::GetUniqueID ( short fUniqueID ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(fUniqueID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVPagePtr IVExtender::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVMasterPtr IVExtender::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

IVShapePtr IVExtender::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

short IVExtender::GetSectionExists ( short Section, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_SectionExists(Section, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::GetRowExists ( short Section, short Row, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_RowExists(Section, Row, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExists(localeSpecificCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellsSRCExists(Section, Row, Column, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::GetLayerCount ( ) {
    short _result = 0;
    HRESULT _hr = get_LayerCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVLayerPtr IVExtender::GetLayer ( short Index ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_Layer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

short IVExtender::AddNamedRow ( short Section, _bstr_t RowName, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddNamedRow(Section, RowName, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::AddRows ( short Section, short Row, short RowTag, short RowCount ) {
    short _result = 0;
    HRESULT _hr = raw_AddRows(Section, Row, RowTag, RowCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVEventListPtr IVExtender::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVExtender::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVExtender::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr IVExtender::GetShapeObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ShapeObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IVWindowPtr IVExtender::OpenSheetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenSheetWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

short IVExtender::GetShapeID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ShapeID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVExtender::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVExtender::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVExtender::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVExtender::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVConnectsPtr IVExtender::GetFromConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_FromConnects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

HRESULT IVExtender::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVExtender::HitTest ( double xPos, double yPos, double Tolerance ) {
    short _result = 0;
    HRESULT _hr = raw_HitTest(xPos, yPos, Tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVHyperlinkPtr IVExtender::GetHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

_bstr_t IVExtender::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVExtender::GetObjectIsInherited ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectIsInherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVExtender::GetShapeID ( ) {
    long _result = 0;
    HRESULT _hr = get_ShapeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVExtender::GetShapeIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ShapeIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVExtender::Group ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

IVShapePtr IVExtender::ShapeDuplicate ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_ShapeDuplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

HRESULT IVExtender::VisualBoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_VisualBoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVisLibOcxSupport wrapper method implementations
//

_bstr_t IVisLibOcxSupport::GetHostID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HostID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVisLibOcxSupport::PutHostID ( _bstr_t pbstr ) {
    HRESULT _hr = put_HostID(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVWindowPtr IVisLibOcxSupport::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVDocumentPtr IVisLibOcxSupport::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

_bstr_t IVisLibOcxSupport::GetSrc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Src(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVisLibOcxSupport::PutSrc ( _bstr_t pbstr ) {
    HRESULT _hr = put_Src(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVisLibOcxSupport::GetNegotiateMenus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NegotiateMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVisLibOcxSupport::PutNegotiateMenus ( VARIANT_BOOL pbVal ) {
    HRESULT _hr = put_NegotiateMenus(pbVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVisLibOcxSupport::GetNegotiateToolbars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NegotiateToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVisLibOcxSupport::PutNegotiateToolbars ( VARIANT_BOOL pbVal ) {
    HRESULT _hr = put_NegotiateToolbars(pbVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVisLibOcxSupport::About ( ) {
    HRESULT _hr = raw_About();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum VisPageSizingBehaviors IVisLibOcxSupport::GetPageSizingBehavior ( ) {
    enum VisPageSizingBehaviors _result;
    HRESULT _hr = get_PageSizingBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVisLibOcxSupport::PutPageSizingBehavior ( enum VisPageSizingBehaviors peVal ) {
    HRESULT _hr = put_PageSizingBehavior(peVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVisLibOcxSupport::GetShutdownBehavior ( ) {
    short _result = 0;
    HRESULT _hr = get_ShutdownBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVisLibOcxSupport::PutShutdownBehavior ( short lpVal ) {
    HRESULT _hr = put_ShutdownBehavior(lpVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVDataRecordset wrapper method implementations
//

IVApplicationPtr IVDataRecordset::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDataRecordset::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVDataRecordset::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVDataRecordset::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDataRecordset::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVDataRecordset::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDataRecordset::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisLinkReplaceBehavior IVDataRecordset::GetLinkReplaceBehavior ( ) {
    enum VisLinkReplaceBehavior _result;
    HRESULT _hr = get_LinkReplaceBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDataRecordset::PutLinkReplaceBehavior ( enum VisLinkReplaceBehavior Property ) {
    HRESULT _hr = put_LinkReplaceBehavior(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVDataConnectionPtr IVDataRecordset::GetDataConnection ( ) {
    struct IVDataConnection * _result = 0;
    HRESULT _hr = get_DataConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataConnectionPtr(_result, false);
}

IVDataColumnsPtr IVDataRecordset::GetDataColumns ( ) {
    struct IVDataColumns * _result = 0;
    HRESULT _hr = get_DataColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataColumnsPtr(_result, false);
}

HRESULT IVDataRecordset::GetPrimaryKey ( enum VisPrimaryKeySettings * PrimaryKeySettings, SAFEARRAY * * PrimaryKey ) {
    HRESULT _hr = raw_GetPrimaryKey(PrimaryKeySettings, PrimaryKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDataRecordset::SetPrimaryKey ( enum VisPrimaryKeySettings PrimaryKeySettings, SAFEARRAY * * PrimaryKey ) {
    HRESULT _hr = raw_SetPrimaryKey(PrimaryKeySettings, PrimaryKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVDataRecordset::GetCommandString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommandString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDataRecordset::PutCommandString ( _bstr_t CommandString ) {
    HRESULT _hr = put_CommandString(CommandString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVDataRecordset::GetDataAsXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataAsXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * IVDataRecordset::GetDataRowIDs ( _bstr_t CriteriaString ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetDataRowIDs(CriteriaString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVDataRecordset::GetRowData ( long DataRowID ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetRowData(DataRowID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDataRecordset::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDataRecordset::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVDataRecordset::RefreshUsingXML ( _bstr_t NewDataAsXML ) {
    HRESULT _hr = raw_RefreshUsingXML(NewDataAsXML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

DATE IVDataRecordset::GetTimeRefreshed ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeRefreshed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDataRecordset::GetRefreshInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDataRecordset::PutRefreshInterval ( long RefreshInterval ) {
    HRESULT _hr = put_RefreshInterval(RefreshInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVDataRecordset::GetRefreshSettings ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDataRecordset::PutRefreshSettings ( long Settings ) {
    HRESULT _hr = put_RefreshSettings(Settings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVEventListPtr IVDataRecordset::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

SAFEARRAY * IVDataRecordset::GetAllRefreshConflicts ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAllRefreshConflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVDataRecordset::RemoveRefreshConflict ( struct IVShape * ShapeInConflict ) {
    HRESULT _hr = raw_RemoveRefreshConflict(ShapeInConflict);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IVDataRecordset::GetMatchingRowsForRefreshConflict ( struct IVShape * ShapeInConflict ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetMatchingRowsForRefreshConflict(ShapeInConflict, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVDataColumn wrapper method implementations
//

IVApplicationPtr IVDataColumn::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDataColumn::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVDataColumn::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVDataColumn::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDataRecordsetPtr IVDataColumn::GetDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_DataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

_bstr_t IVDataColumn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVDataColumn::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVDataColumn::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVDataColumn::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDataColumn::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVDataColumn::GetProperty ( enum VisDataColumnProperties Property ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Property, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IVDataColumn::SetProperty ( enum VisDataColumnProperties Property, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Property, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVDataColumn::GetHyperlink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVDataColumn::PutHyperlink ( VARIANT_BOOL Hyperlink ) {
    HRESULT _hr = put_Hyperlink(Hyperlink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVDataColumns wrapper method implementations
//

IVApplicationPtr IVDataColumns::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDataColumns::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVDataColumns::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVDataColumns::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDataRecordsetPtr IVDataColumns::GetDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_DataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

long IVDataColumns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDataColumnPtr IVDataColumns::GetItem ( const _variant_t & IndexOrName ) {
    struct IVDataColumn * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataColumnPtr(_result, false);
}

IUnknownPtr IVDataColumns::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IVDataColumns::SetColumnProperties ( SAFEARRAY * * ColumnNames, SAFEARRAY * * Properties, SAFEARRAY * * Values ) {
    HRESULT _hr = raw_SetColumnProperties(ColumnNames, Properties, Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVDataRecordsets wrapper method implementations
//

IVApplicationPtr IVDataRecordsets::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDataRecordsets::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVDataRecordsets::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVDataRecordsets::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVDataRecordsets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDataRecordsetPtr IVDataRecordsets::GetItem ( long Index ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

IVDataRecordsetPtr IVDataRecordsets::GetItemFromID ( long ID ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_ItemFromID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

IUnknownPtr IVDataRecordsets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVEventListPtr IVDataRecordsets::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

IVDataRecordsetPtr IVDataRecordsets::Add ( const _variant_t & ConnectionIDOrString, _bstr_t CommandString, long AddOptions, _bstr_t Name ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = raw_Add(ConnectionIDOrString, CommandString, AddOptions, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

IVDataRecordsetPtr IVDataRecordsets::AddFromXML ( _bstr_t XMLString, long AddOptions, _bstr_t Name ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = raw_AddFromXML(XMLString, AddOptions, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

IVDataRecordsetPtr IVDataRecordsets::AddFromConnectionFile ( _bstr_t FileName, long AddOptions, _bstr_t Name ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = raw_AddFromConnectionFile(FileName, AddOptions, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

HRESULT IVDataRecordsets::GetLastDataError ( long * DataErrorCode, BSTR * DataErrorDescription, long * RecordsetID ) {
    HRESULT _hr = raw_GetLastDataError(DataErrorCode, DataErrorDescription, RecordsetID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVDataRecordsetChangedEvent wrapper method implementations
//

IVApplicationPtr IVDataRecordsetChangedEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVDataRecordsetChangedEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVDataRecordsetChangedEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDataRecordsetPtr IVDataRecordsetChangedEvent::GetDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_DataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

SAFEARRAY * IVDataRecordsetChangedEvent::GetDataRowsAdded ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataRowsAdded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVDataRecordsetChangedEvent::GetDataRowsDeleted ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataRowsDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVDataRecordsetChangedEvent::GetDataColumnsAdded ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataColumnsAdded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVDataRecordsetChangedEvent::GetDataColumnsDeleted ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataColumnsDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IVDataRecordsetChangedEvent::GetDataColumnsChanged ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataColumnsChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVValidationIssue wrapper method implementations
//

IVApplicationPtr IVValidationIssue::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVValidationIssue::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVValidationIssue::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVValidationIssue::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVValidationIssue::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVPagePtr IVValidationIssue::GetTargetPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_TargetPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

long IVValidationIssue::GetTargetPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_TargetPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVShapePtr IVValidationIssue::GetTargetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_TargetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

VARIANT_BOOL IVValidationIssue::GetIgnored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Ignored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVValidationIssue::PutIgnored ( VARIANT_BOOL IsIgnored ) {
    HRESULT _hr = put_Ignored(IsIgnored);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVValidationRulePtr IVValidationIssue::GetRule ( ) {
    struct IVValidationRule * _result = 0;
    HRESULT _hr = get_Rule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRulePtr(_result, false);
}

HRESULT IVValidationIssue::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVValidationIssues wrapper method implementations
//

IVApplicationPtr IVValidationIssues::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVValidationIssues::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVValidationIssues::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVValidationIssues::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVValidationIssues::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVValidationIssuePtr IVValidationIssues::GetItem ( long Index ) {
    struct IVValidationIssue * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationIssuePtr(_result, false);
}

IVValidationIssuePtr IVValidationIssues::GetItemFromID ( long IssueID ) {
    struct IVValidationIssue * _result = 0;
    HRESULT _hr = get_ItemFromID(IssueID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationIssuePtr(_result, false);
}

IUnknownPtr IVValidationIssues::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IVValidationIssues::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVValidationRule wrapper method implementations
//

IVApplicationPtr IVValidationRule::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVValidationRule::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVValidationRule::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVValidationRule::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVValidationRule::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVValidationRule::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRule::PutNameU ( _bstr_t NameU ) {
    HRESULT _hr = put_NameU(NameU);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVValidationRule::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRule::PutCategory ( _bstr_t Category ) {
    HRESULT _hr = put_Category(Category);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVValidationRule::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRule::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVValidationRule::GetIgnored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Ignored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVValidationRule::PutIgnored ( VARIANT_BOOL IsIgnored ) {
    HRESULT _hr = put_Ignored(IsIgnored);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVValidationRule::GetFilterExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRule::PutFilterExpression ( _bstr_t FilterExpression ) {
    HRESULT _hr = put_FilterExpression(FilterExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRuleTargets IVValidationRule::GetTargetType ( ) {
    enum VisRuleTargets _result;
    HRESULT _hr = get_TargetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVValidationRule::PutTargetType ( enum VisRuleTargets TargetType ) {
    HRESULT _hr = put_TargetType(TargetType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVValidationRule::GetTestExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TestExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRule::PutTestExpression ( _bstr_t TestExpression ) {
    HRESULT _hr = put_TestExpression(TestExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVValidationRuleSetPtr IVValidationRule::GetRuleSet ( ) {
    struct IVValidationRuleSet * _result = 0;
    HRESULT _hr = get_RuleSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRuleSetPtr(_result, false);
}

HRESULT IVValidationRule::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVValidationIssuePtr IVValidationRule::AddIssue ( struct IVPage * TargetPage, struct IVShape * TargetShape ) {
    struct IVValidationIssue * _result = 0;
    HRESULT _hr = raw_AddIssue(TargetPage, TargetShape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationIssuePtr(_result, false);
}

//
// interface IVValidationRules wrapper method implementations
//

IVApplicationPtr IVValidationRules::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVValidationRules::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVValidationRules::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVValidationRules::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVValidationRules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVValidationRulePtr IVValidationRules::GetItem ( const _variant_t & NameUOrIndex ) {
    struct IVValidationRule * _result = 0;
    HRESULT _hr = get_Item(NameUOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRulePtr(_result, false);
}

IVValidationRulePtr IVValidationRules::GetItemFromID ( long RuleID ) {
    struct IVValidationRule * _result = 0;
    HRESULT _hr = get_ItemFromID(RuleID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRulePtr(_result, false);
}

IUnknownPtr IVValidationRules::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVValidationRulePtr IVValidationRules::Add ( _bstr_t NameU ) {
    struct IVValidationRule * _result = 0;
    HRESULT _hr = raw_Add(NameU, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRulePtr(_result, false);
}

//
// interface IVValidationRuleSet wrapper method implementations
//

IVApplicationPtr IVValidationRuleSet::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVValidationRuleSet::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVValidationRuleSet::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVValidationRuleSet::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVValidationRuleSet::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVValidationRuleSet::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRuleSet::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVValidationRuleSet::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRuleSet::PutNameU ( _bstr_t NameU ) {
    HRESULT _hr = put_NameU(NameU);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVValidationRuleSet::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVValidationRuleSet::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVValidationRuleSet::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVValidationRuleSet::PutEnabled ( VARIANT_BOOL IsEnabled ) {
    HRESULT _hr = put_Enabled(IsEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisRuleSetFlags IVValidationRuleSet::GetRuleSetFlags ( ) {
    enum VisRuleSetFlags _result;
    HRESULT _hr = get_RuleSetFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVValidationRuleSet::PutRuleSetFlags ( enum VisRuleSetFlags RuleSetFlags ) {
    HRESULT _hr = put_RuleSetFlags(RuleSetFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVValidationRulesPtr IVValidationRuleSet::GetRules ( ) {
    struct IVValidationRules * _result = 0;
    HRESULT _hr = get_Rules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRulesPtr(_result, false);
}

HRESULT IVValidationRuleSet::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVValidationRuleSets wrapper method implementations
//

IVApplicationPtr IVValidationRuleSets::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVValidationRuleSets::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVValidationRuleSets::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVValidationRuleSets::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVValidationRuleSets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVValidationRuleSetPtr IVValidationRuleSets::GetItem ( const _variant_t & NameUOrIndex ) {
    struct IVValidationRuleSet * _result = 0;
    HRESULT _hr = get_Item(NameUOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRuleSetPtr(_result, false);
}

IVValidationRuleSetPtr IVValidationRuleSets::GetItemFromID ( long RuleID ) {
    struct IVValidationRuleSet * _result = 0;
    HRESULT _hr = get_ItemFromID(RuleID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRuleSetPtr(_result, false);
}

IUnknownPtr IVValidationRuleSets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVValidationRuleSetPtr IVValidationRuleSets::Add ( _bstr_t NameU ) {
    struct IVValidationRuleSet * _result = 0;
    HRESULT _hr = raw_Add(NameU, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRuleSetPtr(_result, false);
}

IVValidationRuleSetPtr IVValidationRuleSets::AddCopy ( struct IVValidationRuleSet * RuleSet, _bstr_t NameU ) {
    struct IVValidationRuleSet * _result = 0;
    HRESULT _hr = raw_AddCopy(RuleSet, NameU, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRuleSetPtr(_result, false);
}

//
// interface IVValidation wrapper method implementations
//

IVApplicationPtr IVValidation::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

short IVValidation::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVDocumentPtr IVValidation::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

short IVValidation::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE IVValidation::GetLastValidatedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastValidatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVValidation::GetShowIgnoredIssues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowIgnoredIssues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVValidation::PutShowIgnoredIssues ( VARIANT_BOOL IsShown ) {
    HRESULT _hr = put_ShowIgnoredIssues(IsShown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVValidationRuleSetsPtr IVValidation::GetRuleSets ( ) {
    struct IVValidationRuleSets * _result = 0;
    HRESULT _hr = get_RuleSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationRuleSetsPtr(_result, false);
}

IVValidationIssuesPtr IVValidation::GetIssues ( ) {
    struct IVValidationIssues * _result = 0;
    HRESULT _hr = get_Issues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVValidationIssuesPtr(_result, false);
}

HRESULT IVValidation::Validate ( struct IVValidationRuleSet * RuleSet, enum VisValidationFlags Flags ) {
    HRESULT _hr = raw_Validate(RuleSet, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVUIObject wrapper method implementations
//

HRESULT IVUIObject::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVUIObject::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVUIObject::PutName ( _bstr_t pName ) {
    HRESULT _hr = put_Name(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVUIObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVUIObject::PutFlavor ( short pFlavor ) {
    HRESULT _hr = put_Flavor(pFlavor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVUIObject::GetFlavor ( ) {
    short _result = 0;
    HRESULT _hr = get_Flavor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMenuSetsPtr IVUIObject::GetMenuSets ( ) {
    struct IVMenuSets * _result = 0;
    HRESULT _hr = get_MenuSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetsPtr(_result, false);
}

IVToolbarSetsPtr IVUIObject::GetToolbarSets ( ) {
    struct IVToolbarSets * _result = 0;
    HRESULT _hr = get_ToolbarSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetsPtr(_result, false);
}

IVStatusBarsPtr IVUIObject::GetStatusBars ( ) {
    struct IVStatusBars * _result = 0;
    HRESULT _hr = get_StatusBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarsPtr(_result, false);
}

IVAccelTablesPtr IVUIObject::GetAccelTables ( ) {
    struct IVAccelTables * _result = 0;
    HRESULT _hr = get_AccelTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablesPtr(_result, false);
}

HRESULT IVUIObject::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVUIObject::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVUIObject::UpdateUI ( ) {
    HRESULT _hr = raw_UpdateUI();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVUIObject::GetDisplayKeysInTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayKeysInTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVUIObject::PutDisplayKeysInTooltips ( VARIANT_BOOL pbShow ) {
    HRESULT _hr = put_DisplayKeysInTooltips(pbShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVUIObject::GetDisplayTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVUIObject::PutDisplayTooltips ( VARIANT_BOOL pbShow ) {
    HRESULT _hr = put_DisplayTooltips(pbShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVUIObject::GetLargeButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVUIObject::PutLargeButtons ( VARIANT_BOOL pbLarge ) {
    HRESULT _hr = put_LargeButtons(pbLarge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVUIObject::GetMenuAnimationStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_MenuAnimationStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVUIObject::PutMenuAnimationStyle ( short pAnim ) {
    HRESULT _hr = put_MenuAnimationStyle(pAnim);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVUIObjectPtr IVUIObject::GetClone ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVInvisibleApp wrapper method implementations
//

IVDocumentPtr IVInvisibleApp::GetActiveDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

IVPagePtr IVInvisibleApp::GetActivePage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ActivePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

IVWindowPtr IVInvisibleApp::GetActiveWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

IVApplicationPtr IVInvisibleApp::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

IVDocumentsPtr IVInvisibleApp::GetDocuments ( ) {
    struct IVDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentsPtr(_result, false);
}

short IVInvisibleApp::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVInvisibleApp::GetOnDataChangeDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_OnDataChangeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutOnDataChangeDelay ( long lpi4Ret ) {
    HRESULT _hr = put_OnDataChangeDelay(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVInvisibleApp::GetProcessID ( ) {
    long _result = 0;
    HRESULT _hr = get_ProcessID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVInvisibleApp::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVInvisibleApp::Redo ( ) {
    HRESULT _hr = raw_Redo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVInvisibleApp::GetScreenUpdating ( ) {
    short _result = 0;
    HRESULT _hr = get_ScreenUpdating(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutScreenUpdating ( short lpi2Ret ) {
    HRESULT _hr = put_ScreenUpdating(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVInvisibleApp::Undo ( ) {
    HRESULT _hr = raw_Undo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVInvisibleApp::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

short IVInvisibleApp::GetWindowHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_WindowHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowsPtr IVInvisibleApp::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

long IVInvisibleApp::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetIsVisio16 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetIsVisio32 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVInvisibleApp::GetWindowHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetInstanceHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_InstanceHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVInvisibleApp::GetInstanceHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVUIObjectPtr IVInvisibleApp::GetBuiltInMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

IVUIObjectPtr IVInvisibleApp::GetBuiltInToolbars ( short fIgnored ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInToolbars(fIgnored, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

IVUIObjectPtr IVInvisibleApp::GetCustomMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

HRESULT IVInvisibleApp::SetCustomMenus ( struct IVUIObject * MenusObject ) {
    HRESULT _hr = raw_SetCustomMenus(MenusObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVInvisibleApp::GetCustomMenusFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomMenusFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutCustomMenusFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomMenusFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVInvisibleApp::ClearCustomMenus ( ) {
    HRESULT _hr = raw_ClearCustomMenus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IVUIObjectPtr IVInvisibleApp::GetCustomToolbars ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

HRESULT IVInvisibleApp::SetCustomToolbars ( struct IVUIObject * ToolbarsObject ) {
    HRESULT _hr = raw_SetCustomToolbars(ToolbarsObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVInvisibleApp::GetCustomToolbarsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomToolbarsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutCustomToolbarsFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomToolbarsFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVInvisibleApp::ClearCustomToolbars ( ) {
    HRESULT _hr = raw_ClearCustomToolbars();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVInvisibleApp::GetAddonPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddonPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutAddonPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_AddonPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetDrawingPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawingPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutDrawingPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_DrawingPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetFilterPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutFilterPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FilterPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetHelpPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutHelpPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_HelpPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetStartupPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartupPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutStartupPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StartupPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetStencilPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StencilPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutStencilPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StencilPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetTemplatePaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplatePaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutTemplatePaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TemplatePaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutUserName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetPromptForSummary ( ) {
    short _result = 0;
    HRESULT _hr = get_PromptForSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutPromptForSummary ( short lpi2Ret ) {
    HRESULT _hr = put_PromptForSummary(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IVAddonsPtr IVInvisibleApp::GetAddons ( ) {
    struct IVAddons * _result = 0;
    HRESULT _hr = get_Addons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonsPtr(_result, false);
}

HRESULT IVInvisibleApp::SaveWorkspaceAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveWorkspaceAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVInvisibleApp::DoCmd ( short CommandID ) {
    HRESULT _hr = raw_DoCmd(CommandID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVInvisibleApp::GetProfileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProfileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVInvisibleApp::GetEventInfo ( long eventSeqNum ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventInfo(eventSeqNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IVEventListPtr IVInvisibleApp::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

short IVInvisibleApp::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetActive ( ) {
    short _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetDeferRecalc ( ) {
    short _result = 0;
    HRESULT _hr = get_DeferRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutDeferRecalc ( short lpi2Ret ) {
    HRESULT _hr = put_DeferRecalc(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetAlertResponse ( ) {
    short _result = 0;
    HRESULT _hr = get_AlertResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutAlertResponse ( short lpi2Ret ) {
    HRESULT _hr = put_AlertResponse(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetShowProgress ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutShowProgress ( short lpi2Ret ) {
    HRESULT _hr = put_ShowProgress(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IVInvisibleApp::GetVbe ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vbe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

short IVInvisibleApp::GetShowMenus ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutShowMenus ( short lpi2Ret ) {
    HRESULT _hr = put_ShowMenus(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetToolbarStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_ToolbarStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutToolbarStyle ( short lpi2Ret ) {
    HRESULT _hr = put_ToolbarStyle(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetShowStatusBar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowStatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutShowStatusBar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowStatusBar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetEventsEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_EventsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutEventsEnabled ( short lpi2Ret ) {
    HRESULT _hr = put_EventsEnabled(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::FormatResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResult(StringOrNumber, UnitsIn, UnitsOut, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IVInvisibleApp::ConvertResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut ) {
    double _result = 0;
    HRESULT _hr = raw_ConvertResult(StringOrNumber, UnitsIn, UnitsOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IVInvisibleApp::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVInvisibleApp::EnumDirectories ( _bstr_t PathsString, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_EnumDirectories(PathsString, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVInvisibleApp::GetTraceFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_TraceFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutTraceFlags ( long lpi4Ret ) {
    HRESULT _hr = put_TraceFlags(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IVInvisibleApp::PurgeUndo ( ) {
    HRESULT _hr = raw_PurgeUndo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVInvisibleApp::QueueMarkerEvent ( _bstr_t ContextString ) {
    long _result = 0;
    HRESULT _hr = raw_QueueMarkerEvent(ContextString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetShowToolbar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutShowToolbar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowToolbar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVInvisibleApp::GetLiveDynamics ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LiveDynamics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutLiveDynamics ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_LiveDynamics(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVInvisibleApp::GetAutoLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutAutoLayout ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_AutoLayout(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVInvisibleApp::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVInvisibleApp::BeginUndoScope ( _bstr_t bstrUndoScopeName ) {
    long _result = 0;
    HRESULT _hr = raw_BeginUndoScope(bstrUndoScopeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVInvisibleApp::EndUndoScope ( long nScopeID, VARIANT_BOOL bCommit ) {
    HRESULT _hr = raw_EndUndoScope(nScopeID, bCommit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVInvisibleApp::AddUndoUnit ( IUnknown * pUndoUnit ) {
    HRESULT _hr = raw_AddUndoUnit(pUndoUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVInvisibleApp::GetCommandLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommandLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVInvisibleApp::GetIsUndoingOrRedoing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUndoingOrRedoing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVInvisibleApp::GetCurrentScope ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentScope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IVInvisibleApp::GetIsInScope ( long nCmdID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInScope(nCmdID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVInvisibleApp::Getold_Addins ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_old_Addins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IVInvisibleApp::GetProductName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVInvisibleApp::GetUndoEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutUndoEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_UndoEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVInvisibleApp::GetShowChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutShowChanges ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_ShowChanges(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVInvisibleApp::GetTypelibMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetTypelibMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVInvisibleApp::GetAutoRecoverInterval ( ) {
    short _result = 0;
    HRESULT _hr = get_AutoRecoverInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutAutoRecoverInterval ( short lpi2Ret ) {
    HRESULT _hr = put_AutoRecoverInterval(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVInvisibleApp::GetInhibitSelectChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InhibitSelectChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutInhibitSelectChange ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_InhibitSelectChange(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVInvisibleApp::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutActivePrinter ( _bstr_t pbstrPrinterName ) {
    HRESULT _hr = put_ActivePrinter(pbstrPrinterName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IVInvisibleApp::GetAvailablePrinters ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePrinters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVInvisibleApp::RenameCurrentScope ( _bstr_t bstrScopeName ) {
    HRESULT _hr = raw_RenameCurrentScope(bstrScopeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVInvisibleApp::InvokeHelp ( _bstr_t bstrHelpFileName, long Command, long Data ) {
    HRESULT _hr = raw_InvokeHelp(bstrHelpFileName, Command, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IVInvisibleApp::GetCommandBars ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IVInvisibleApp::GetBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVInvisibleApp::GetCOMAddIns ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IVInvisibleApp::GetDefaultPageUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultPageUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVInvisibleApp::PutDefaultPageUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultPageUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVInvisibleApp::GetDefaultTextUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultTextUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVInvisibleApp::PutDefaultTextUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultTextUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVInvisibleApp::GetDefaultAngleUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultAngleUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVInvisibleApp::PutDefaultAngleUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultAngleUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVInvisibleApp::GetDefaultDurationUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultDurationUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IVInvisibleApp::PutDefaultDurationUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultDurationUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IVInvisibleApp::GetFullBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVInvisibleApp::OnComponentEnterState ( enum VisOnComponentEnterCodes uStateID, VARIANT_BOOL bEnter ) {
    HRESULT _hr = raw_OnComponentEnterState(uStateID, bEnter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVInvisibleApp::GetVBAEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VBAEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum VisZoomBehavior IVInvisibleApp::GetDefaultZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_DefaultZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutDefaultZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_DefaultZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IVInvisibleApp::GetUsageStatistic ( long nWhichStatistic ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUsageStatistic(nWhichStatistic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IFontDisp * IVInvisibleApp::GetDialogFont ( ) {
    IFontDisp * _result = 0;
    HRESULT _hr = get_DialogFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVInvisibleApp::GetLanguageHelp ( ) {
    long _result = 0;
    HRESULT _hr = get_LanguageHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVWindowPtr IVInvisibleApp::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

_bstr_t IVInvisibleApp::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IVInvisibleApp::GetConnectorToolDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ConnectorToolDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVApplicationSettingsPtr IVInvisibleApp::GetSettings ( ) {
    struct IVApplicationSettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationSettingsPtr(_result, false);
}

_bstr_t IVInvisibleApp::FormatResultEx ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format, long LangID, long CalendarID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResultEx(StringOrNumber, UnitsIn, UnitsOut, Format, LangID, CalendarID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr IVInvisibleApp::GetSaveAsWebObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SaveAsWebObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IVInvisibleApp::GetMsoDebugOptions ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IVInvisibleApp::GetMyShapesPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyShapesPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVInvisibleApp::PutMyShapesPath ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_MyShapesPath(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr IVInvisibleApp::GetDefaultRectangleDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_DefaultRectangleDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL IVInvisibleApp::GetDataFeaturesEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataFeaturesEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IVInvisibleApp::GetLanguageSettings ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IVInvisibleApp::GetAssistance ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT IVInvisibleApp::RegisterRibbonX ( IUnknown * SourceAddOn, struct IVDocument * TargetDocument, enum VisRibbonXModes TargetModes, _bstr_t FriendlyName ) {
    HRESULT _hr = raw_RegisterRibbonX(SourceAddOn, TargetDocument, TargetModes, FriendlyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVInvisibleApp::UnregisterRibbonX ( IUnknown * SourceAddOn, struct IVDocument * TargetDocument ) {
    HRESULT _hr = raw_UnregisterRibbonX(SourceAddOn, TargetDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVInvisibleApp::GetPreviewEnabled ( _bstr_t GalleryName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPreviewEnabled(GalleryName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVInvisibleApp::SetPreviewEnabled ( _bstr_t GalleryName, VARIANT_BOOL OnOrOff ) {
    HRESULT _hr = raw_SetPreviewEnabled(GalleryName, OnOrOff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVInvisibleApp::GetBuiltInStencilFile ( enum VisBuiltInStencilTypes StencilType, enum VisMeasurementSystem MeasurementSystem ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBuiltInStencilFile(StencilType, MeasurementSystem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVInvisibleApp::GetCustomStencilFile ( enum VisBuiltInStencilTypes StencilType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCustomStencilFile(StencilType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVInvisibleApp::GetDeferRelationshipRecalc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeferRelationshipRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVInvisibleApp::PutDeferRelationshipRecalc ( VARIANT_BOOL lpi2Ret ) {
    HRESULT _hr = put_DeferRelationshipRecalc(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum VisEdition IVInvisibleApp::GetCurrentEdition ( ) {
    enum VisEdition _result;
    HRESULT _hr = get_CurrentEdition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

__int64 IVInvisibleApp::GetInstanceHandle64 ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_InstanceHandle64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVMenuSets wrapper method implementations
//

IUnknownPtr IVMenuSets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVMenuSetPtr IVMenuSets::GetItem ( long lIndex ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

IVMenuSetPtr IVMenuSets::GetItemAtID ( long lID ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

IVMenuSetPtr IVMenuSets::Add ( ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

IVMenuSetPtr IVMenuSets::AddAtID ( long lID ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

long IVMenuSets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVUIObjectPtr IVMenuSets::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVMenuSet wrapper method implementations
//

HRESULT IVMenuSet::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVMenuSet::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenuSet::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenuSet::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVMenuSet::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMenusPtr IVMenuSet::GetMenus ( ) {
    struct IVMenus * _result = 0;
    HRESULT _hr = get_Menus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenusPtr(_result, false);
}

IVMenuSetsPtr IVMenuSet::GetParent ( ) {
    struct IVMenuSets * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetsPtr(_result, false);
}

VARIANT_BOOL IVMenuSet::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMenuSet::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutHeight ( short pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuSet::GetHeight ( ) {
    short _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutLeft ( short pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuSet::GetLeft ( ) {
    short _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutPosition ( short pPos ) {
    HRESULT _hr = put_Position(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuSet::GetPosition ( ) {
    short _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutProtection ( short pProt ) {
    HRESULT _hr = put_Protection(pProt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuSet::GetProtection ( ) {
    short _result = 0;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutRowIndex ( short pwRow ) {
    HRESULT _hr = put_RowIndex(pwRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuSet::GetRowIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutTop ( short pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuSet::GetTop ( ) {
    short _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMenuSet::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuSet::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuSet::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVMenuSet wrapper method implementations
//

HRESULT IEnumVMenuSet::Next ( long celt, struct IVMenuSet * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenuSet::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenuSet::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenuSet::Clone ( struct IEnumVMenuSet * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVMenus wrapper method implementations
//

IUnknownPtr IVMenus::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVMenuPtr IVMenus::GetItem ( long lIndex ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

IVMenuPtr IVMenus::Add ( ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

IVMenuPtr IVMenus::AddAt ( long lIndex ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

long IVMenus::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMenuSetPtr IVMenus::GetParent ( ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

//
// interface IVMenu wrapper method implementations
//

HRESULT IVMenu::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVMenu::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenu::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenu::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVMenu::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutMDIWindowMenu ( short pMDIWindowMenu ) {
    HRESULT _hr = put_MDIWindowMenu(pMDIWindowMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetMDIWindowMenu ( ) {
    short _result = 0;
    HRESULT _hr = get_MDIWindowMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMenuItemsPtr IVMenu::GetMenuItems ( ) {
    struct IVMenuItems * _result = 0;
    HRESULT _hr = get_MenuItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemsPtr(_result, false);
}

IVMenusPtr IVMenu::GetParent ( ) {
    struct IVMenus * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenusPtr(_result, false);
}

void IVMenu::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMenu::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMenu::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenu::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenu::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenu::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenu::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenu::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenu::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenu::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenu::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenu::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVMenu::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVMenu::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMenu::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMenu::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenu::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenu::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVMenu wrapper method implementations
//

HRESULT IEnumVMenu::Next ( long celt, struct IVMenu * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenu::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenu::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenu::Clone ( struct IEnumVMenu * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVMenuItems wrapper method implementations
//

IUnknownPtr IVMenuItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVMenuItemPtr IVMenuItems::GetItem ( long lIndex ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

IVMenuItemPtr IVMenuItems::Add ( ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

IVMenuItemPtr IVMenuItems::AddAt ( long lIndex ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

long IVMenuItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMenuPtr IVMenuItems::GetParent ( ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

IVMenuItemPtr IVMenuItems::GetParentItem ( ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

//
// interface IVMenuItem wrapper method implementations
//

HRESULT IVMenuItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVMenuItem::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVMenuItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVMenuItemsPtr IVMenuItem::GetMenuItems ( ) {
    struct IVMenuItems * _result = 0;
    HRESULT _hr = get_MenuItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemsPtr(_result, false);
}

IVMenuItemsPtr IVMenuItem::GetParent ( ) {
    struct IVMenuItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemsPtr(_result, false);
}

void IVMenuItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMenuItem::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVMenuItem::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenuItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenuItem::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenuItem::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenuItem::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenuItem::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenuItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenuItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenuItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenuItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenuItem::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVMenuItem::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVMenuItem::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IVMenuItem::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IVMenuItem::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMenuItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMenuItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVMenuItem::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVMenuItem::PutBeginGroup ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_BeginGroup(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVMenuItem::GetBeginGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVMenuItem wrapper method implementations
//

HRESULT IEnumVMenuItem::Next ( long celt, struct IVMenuItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenuItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenuItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVMenuItem::Clone ( struct IEnumVMenuItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVToolbarSets wrapper method implementations
//

IUnknownPtr IVToolbarSets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVToolbarSetPtr IVToolbarSets::GetItem ( long lIndex ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

IVToolbarSetPtr IVToolbarSets::GetItemAtID ( long lID ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

IVToolbarSetPtr IVToolbarSets::Add ( ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

IVToolbarSetPtr IVToolbarSets::AddAtID ( long lID ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

long IVToolbarSets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVUIObjectPtr IVToolbarSets::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVToolbarSet wrapper method implementations
//

HRESULT IVToolbarSet::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVToolbarSet::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVToolbarSet::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbarSet::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVToolbarSet::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVToolbarsPtr IVToolbarSet::GetToolbars ( ) {
    struct IVToolbars * _result = 0;
    HRESULT _hr = get_Toolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarsPtr(_result, false);
}

IVToolbarSetsPtr IVToolbarSet::GetParent ( ) {
    struct IVToolbarSets * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetsPtr(_result, false);
}

//
// interface IEnumVToolbarSet wrapper method implementations
//

HRESULT IEnumVToolbarSet::Next ( long celt, struct IVToolbarSet * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbarSet::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbarSet::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbarSet::Clone ( struct IEnumVToolbarSet * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVToolbars wrapper method implementations
//

IUnknownPtr IVToolbars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVToolbarPtr IVToolbars::GetItem ( long lIndex ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

IVToolbarPtr IVToolbars::Add ( ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

IVToolbarPtr IVToolbars::AddAt ( long lIndex ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

long IVToolbars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVToolbarSetPtr IVToolbars::GetParent ( ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

//
// interface IVToolbar wrapper method implementations
//

HRESULT IVToolbar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVToolbar::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVToolbar::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbar::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVToolbar::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVToolbarItemsPtr IVToolbar::GetToolbarItems ( ) {
    struct IVToolbarItems * _result = 0;
    HRESULT _hr = get_ToolbarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemsPtr(_result, false);
}

IVToolbarsPtr IVToolbar::GetParent ( ) {
    struct IVToolbars * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarsPtr(_result, false);
}

VARIANT_BOOL IVToolbar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVToolbar::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutHeight ( short pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbar::GetHeight ( ) {
    short _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutLeft ( short pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbar::GetLeft ( ) {
    short _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutPosition ( short pPos ) {
    HRESULT _hr = put_Position(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbar::GetPosition ( ) {
    short _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutProtection ( short pProt ) {
    HRESULT _hr = put_Protection(pProt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbar::GetProtection ( ) {
    short _result = 0;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutRowIndex ( short pwRow ) {
    HRESULT _hr = put_RowIndex(pwRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbar::GetRowIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutTop ( short pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbar::GetTop ( ) {
    short _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVToolbar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbar::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbar::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVToolbar wrapper method implementations
//

HRESULT IEnumVToolbar::Next ( long celt, struct IVToolbar * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbar::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbar::Clone ( struct IEnumVToolbar * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVToolbarItems wrapper method implementations
//

IUnknownPtr IVToolbarItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVToolbarItemPtr IVToolbarItems::GetItem ( long lIndex ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

IVToolbarItemPtr IVToolbarItems::Add ( ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

IVToolbarItemPtr IVToolbarItems::AddAt ( long lIndex ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

long IVToolbarItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVToolbarPtr IVToolbarItems::GetParent ( ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

IVToolbarItemPtr IVToolbarItems::GetParentItem ( ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

//
// interface IVToolbarItem wrapper method implementations
//

HRESULT IVToolbarItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVToolbarItem::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVToolbarItem::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVToolbarItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVToolbarItemsPtr IVToolbarItem::GetParent ( ) {
    struct IVToolbarItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemsPtr(_result, false);
}

void IVToolbarItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbarItem::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVToolbarItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbarItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVToolbarItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbarItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVToolbarItem::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbarItem::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVToolbarItem::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbarItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVToolbarItem::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVToolbarItem::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVToolbarItem::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVToolbarItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVToolbarItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVToolbarItem::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVToolbarItemsPtr IVToolbarItem::GetToolbarItems ( ) {
    struct IVToolbarItems * _result = 0;
    HRESULT _hr = get_ToolbarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemsPtr(_result, false);
}

short IVToolbarItem::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVToolbarItem::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVToolbarItem::PutBeginGroup ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_BeginGroup(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVToolbarItem::GetBeginGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVToolbarItem wrapper method implementations
//

HRESULT IEnumVToolbarItem::Next ( long celt, struct IVToolbarItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbarItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbarItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVToolbarItem::Clone ( struct IEnumVToolbarItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVStatusBars wrapper method implementations
//

IUnknownPtr IVStatusBars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVStatusBarPtr IVStatusBars::GetItem ( long lIndex ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

IVStatusBarPtr IVStatusBars::GetItemAtID ( long lID ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

IVStatusBarPtr IVStatusBars::Add ( ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

IVStatusBarPtr IVStatusBars::AddAtID ( long lID ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

long IVStatusBars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVUIObjectPtr IVStatusBars::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVStatusBar wrapper method implementations
//

HRESULT IVStatusBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVStatusBar::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStatusBar::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStatusBar::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVStatusBar::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVStatusBarItemsPtr IVStatusBar::GetStatusBarItems ( ) {
    struct IVStatusBarItems * _result = 0;
    HRESULT _hr = get_StatusBarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemsPtr(_result, false);
}

IVStatusBarsPtr IVStatusBar::GetParent ( ) {
    struct IVStatusBars * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarsPtr(_result, false);
}

VARIANT_BOOL IVStatusBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBar::PutProtection ( short pProt ) {
    HRESULT _hr = put_Protection(pProt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBar::GetProtection ( ) {
    short _result = 0;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVStatusBar wrapper method implementations
//

HRESULT IEnumVStatusBar::Next ( long celt, struct IVStatusBar * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVStatusBar::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVStatusBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVStatusBar::Clone ( struct IEnumVStatusBar * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVStatusBarItems wrapper method implementations
//

IUnknownPtr IVStatusBarItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVStatusBarItemPtr IVStatusBarItems::GetItem ( long lIndex ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

IVStatusBarItemPtr IVStatusBarItems::Add ( ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

IVStatusBarItemPtr IVStatusBarItems::AddAt ( long lIndex ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

long IVStatusBarItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVStatusBarPtr IVStatusBarItems::GetParent ( ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

IVStatusBarItemPtr IVStatusBarItems::GetParentItem ( ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

//
// interface IVStatusBarItem wrapper method implementations
//

HRESULT IVStatusBarItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IVStatusBarItem::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVStatusBarItem::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVStatusBarItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVStatusBarItemsPtr IVStatusBarItem::GetParent ( ) {
    struct IVStatusBarItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemsPtr(_result, false);
}

void IVStatusBarItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStatusBarItem::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStatusBarItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStatusBarItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStatusBarItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStatusBarItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStatusBarItem::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStatusBarItem::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStatusBarItem::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStatusBarItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVStatusBarItem::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVStatusBarItem::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IVStatusBarItem::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVStatusBarItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IVStatusBarItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVStatusBarItem::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVStatusBarItem::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVStatusBarItemsPtr IVStatusBarItem::GetStatusBarItems ( ) {
    struct IVStatusBarItems * _result = 0;
    HRESULT _hr = get_StatusBarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemsPtr(_result, false);
}

short IVStatusBarItem::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IVStatusBarItem::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVStatusBarItem wrapper method implementations
//

HRESULT IEnumVStatusBarItem::Next ( long celt, struct IVStatusBarItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVStatusBarItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVStatusBarItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVStatusBarItem::Clone ( struct IEnumVStatusBarItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVAccelTables wrapper method implementations
//

IUnknownPtr IVAccelTables::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVAccelTablePtr IVAccelTables::GetItem ( long lIndex ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

IVAccelTablePtr IVAccelTables::GetItemAtID ( long lID ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

IVAccelTablePtr IVAccelTables::Add ( ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

IVAccelTablePtr IVAccelTables::AddAtID ( long lID ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

long IVAccelTables::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVUIObjectPtr IVAccelTables::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVAccelTable wrapper method implementations
//

HRESULT IVAccelTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVAccelTable::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVAccelTable::PutTableName ( _bstr_t pTableName ) {
    HRESULT _hr = put_TableName(pTableName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVAccelTable::GetTableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IVAccelTable::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVAccelItemsPtr IVAccelTable::GetAccelItems ( ) {
    struct IVAccelItems * _result = 0;
    HRESULT _hr = get_AccelItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemsPtr(_result, false);
}

IVAccelTablesPtr IVAccelTable::GetParent ( ) {
    struct IVAccelTables * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablesPtr(_result, false);
}

//
// interface IEnumVAccelTable wrapper method implementations
//

HRESULT IEnumVAccelTable::Next ( long celt, struct IVAccelTable * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVAccelTable::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVAccelTable::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVAccelTable::Clone ( struct IEnumVAccelTable * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVAccelItems wrapper method implementations
//

IUnknownPtr IVAccelItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IVAccelItemPtr IVAccelItems::GetItem ( long lIndex ) {
    struct IVAccelItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemPtr(_result, false);
}

IVAccelItemPtr IVAccelItems::Add ( ) {
    struct IVAccelItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemPtr(_result, false);
}

long IVAccelItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVAccelTablePtr IVAccelItems::GetParent ( ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

//
// interface IVAccelItem wrapper method implementations
//

HRESULT IVAccelItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

short IVAccelItem::GetDefault ( ) {
    short _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVAccelItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVAccelItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVAccelItem::PutKey ( short pKey ) {
    HRESULT _hr = put_Key(pKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVAccelItem::GetKey ( ) {
    short _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVAccelItem::PutAlt ( short pAlt ) {
    HRESULT _hr = put_Alt(pAlt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVAccelItem::GetAlt ( ) {
    short _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVAccelItem::PutShift ( short pShift ) {
    HRESULT _hr = put_Shift(pShift);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVAccelItem::GetShift ( ) {
    short _result = 0;
    HRESULT _hr = get_Shift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IVAccelItem::PutControl ( short pControl ) {
    HRESULT _hr = put_Control(pControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

short IVAccelItem::GetControl ( ) {
    short _result = 0;
    HRESULT _hr = get_Control(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IVAccelItemsPtr IVAccelItem::GetParent ( ) {
    struct IVAccelItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemsPtr(_result, false);
}

void IVAccelItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVAccelItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IVAccelItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IVAccelItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEnumVAccelItem wrapper method implementations
//

HRESULT IEnumVAccelItem::Next ( long celt, struct IVAccelItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVAccelItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVAccelItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IEnumVAccelItem::Clone ( struct IEnumVAccelItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVBUndoManager wrapper method implementations
//

HRESULT IVBUndoManager::Add ( struct IVBUndoUnit * pUnit ) {
    HRESULT _hr = raw_Add(pUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVBUndoUnit wrapper method implementations
//

HRESULT IVBUndoUnit::Do ( struct IVBUndoManager * pMgr ) {
    HRESULT _hr = raw_Do(pMgr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IVBUndoUnit::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IVBUndoUnit::GetUnitTypeCLSID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitTypeCLSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IVBUndoUnit::OnNextAdd ( ) {
    HRESULT _hr = raw_OnNextAdd();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IVBUndoUnit::GetUnitTypeLong ( ) {
    long _result = 0;
    HRESULT _hr = get_UnitTypeLong(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IVBUndoUnit::GetUnitSize ( ) {
    long _result = 0;
    HRESULT _hr = get_UnitSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

} // namespace Office

